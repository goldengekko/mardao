package ${daoBasePackage};

import java.io.Serializable;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JPAHelper<T, ID extends Serializable> implements AbstractHelper<T, ID> {

   protected final Class<T> persistentClass;
   protected final Logger LOG = LoggerFactory.getLogger(getClass());
   
#if( $containerManagedEntityManager )
	/** Container-managed EntityManager */
   @PersistenceContext
   private EntityManager entityManager;
#else   
	/** Application-managed EntityManager */
   private final ThreadLocal<EntityManager> entityManager = new ThreadLocal<EntityManager>();
#end   
   
   private EntityManagerFactory entityManagerFactory;

   public JPAHelper(String type) throws ClassNotFoundException {
      this.persistentClass = (Class<T>) Class.forName(type);
   }

   public JPAHelper(Class<T> type) {
      this.persistentClass = type;
   }
   
   public void setEntityManagerFactory(EntityManagerFactory emf) {
      this.entityManagerFactory = emf;
   }
   
   public EntityManagerFactory getEntityManagerFactory() {
     if (null == entityManagerFactory) {
     	entityManagerFactory = Persistence.createEntityManagerFactory("${persistenceUnitName}");
     }
     return entityManagerFactory;
   }
   
   /**
    * Override to implement specific EntityManager factory functionality
    * @see close
    */
   protected EntityManager getEntityManager() {
#if( $containerManagedEntityManager )
      // As the EntityManager is managed by the Container,
      // we should do nothing here but returning the injected
      // entityManager.
      // This setting is controlled by generator plugin configuration <containerManagedEntityManager>.
      return entityManager;   
#else
      // one entity manager per thread:
      EntityManager em = entityManager.get();
         
      // discard closed?
      if (null != em && !em.isOpen()) {
      	em = null;
      	entityManager.remove();
      }
      
      // create new?
      if (em == null) {
         em = getEntityManagerFactory().createEntityManager();
         entityManager.set(em);
      }
      
      return em;
#end      
   }
   
   /**
    * Override to implement specific EntityManager factory functionality
    * @see getEntityManager
    */
   public void close() {
#if( $containerManagedEntityManager )
      // As the EntityManager is managed by the Container,
      // we should do nothing here.
      // This setting is controlled by generator plugin configuration <containerManagedEntityManager>.
#else
      final EntityManager em = entityManager.get();   
      // close?
      if (null != em && em.isOpen()) {
      	em.close();
      	entityManager.remove();
      }
#end      
	}   

   protected EntityTransaction beginTransaction() {
#if( $containerManagedTransactionManager )
      // container-managed TransactionManager
      return null;
#else
      final EntityTransaction tx = getEntityManager().getTransaction();
      tx.begin();
      return tx;
#end
   }

   protected void commitTransaction(EntityTransaction tx) {
#if( $containerManagedTransactionManager )
      // container-managed TransactionManager
#else
      if (null != tx && tx.isActive()) {
         tx.commit();
      }
#end
   }

   protected Class<T> getPersistentClass() {
      return persistentClass;
   }

#if( "1.5" != $sourceVersion )
   @Override
#end
   public T findByPrimaryKey(ID id) {
      final EntityManager em = getEntityManager();
      final T returnValue = em.find(persistentClass, id);
      close();
      return returnValue;
   }

#if( "1.5" != $sourceVersion )
   @Override
#end
   public void persist(T entity) {
      //System.out.println("Persisting " + persistentClass.getSimpleName());
      final EntityManager em = getEntityManager();
      try {
	      final EntityTransaction tx = beginTransaction();
	      em.persist(entity);
	      em.flush();
	      em.refresh(entity);
	
	      commitTransaction(tx);
	  }
	  catch (RuntimeException e) {
	      e.printStackTrace();
	      throw e;
	  }
	  finally {
          close();
      }
   }

#if( "1.5" != $sourceVersion )
   @Override
#end
   public void update(T entity) {
	  //System.out.println("Merging " + persistentClass.getSimpleName());
      final EntityManager em = getEntityManager();
      final EntityTransaction tx = beginTransaction();
      em.merge(entity);
      commitTransaction(tx);
      close();
   }

#if( "1.5" != $sourceVersion )
   @Override
#end
   public void delete(T entity) {
      final EntityManager em = getEntityManager();
      final EntityTransaction tx = beginTransaction();
      em.merge(entity);
      em.flush();
      em.remove(entity);
      em.flush();
      commitTransaction(tx);
      close();
   }

    @SuppressWarnings("unchecked")
#if( "1.5" != $sourceVersion )
   @Override
#end
    public int deleteAll() {
        final EntityManager em = getEntityManager();
        final String jql = "DELETE FROM " + getTableName();
        final int returnValue = em.createQuery(jql).executeUpdate();
        close();
        return returnValue;
    }

   @SuppressWarnings("unchecked")
#if( "1.5" != $sourceVersion )
   @Override
#end
   public List<T> findAll() {
	  //System.out.println("findAll " + persistentClass.getSimpleName());
      final EntityManager em = getEntityManager();
      final List<T> returnValue = em.createQuery("SELECT t FROM " + getTableName() + " t").getResultList();
      
      // for eager fetch then close
      returnValue.size();
      close();
      return returnValue;
   }
   
	/**
	 * find-by method for generic unique attribute field 
	 * @param fieldName the generic unique attribute's field name
	 * @param param the generic unique attribute
	 * @return the unique entity for the specified attribute
	 */
	@SuppressWarnings("unchecked")
#if( "1.5" != $sourceVersion )
   @Override
#end
	public final T findUniqueBy(String fieldName, Object param) {
		try {
		    final EntityManager em = getEntityManager();
			final Query query =	em.createQuery("SELECT t FROM " + getTableName() + " t WHERE t." + fieldName + " = :param");
			query.setParameter("param", param);
			final T returnValue = (T) query.getSingleResult();
			return returnValue;
		}
		catch (javax.persistence.NoResultException nre) {
		}
		finally {
			close();
		}
		return null;
	}
	
	/**
	 * find-by method for generic attribute field
	 * @param fieldName the generic unique attribute's field name
	 * @param param the specified generic attribute
	 * @return a List of entities with the specified attribute
	 */
	@SuppressWarnings("unchecked")
#if( "1.5" != $sourceVersion )
   @Override
#end
	public final List<T> findBy(String fieldName, Object param) {
	    final EntityManager em = getEntityManager();
		final Query query =	em.createQuery("SELECT t FROM " + getTableName() + " t WHERE t." + fieldName + " = :param");
		query.setParameter("param", param);
		final List<T> returnValue = query.getResultList();
		
		// Do this so we can eager load the list and close the EM: 
		returnValue.size();
		
		close();
		return returnValue;
	}
	
	/**
	 * find-by method for generic field
	 * @param fieldName the generic unique attribute's field name
	 * @param foreignClass the related entity's class
	 * @param key the specified foreign key
	 * @return a List of entities with the specified foreign key
	 */
	@SuppressWarnings("unchecked")
#if( "1.5" != $sourceVersion )
   @Override
#end
	public final List<T> findByKey(String fieldName, Class foreignClass, Object key) {
	    final EntityManager em = getEntityManager();
		final Object lazy = em.getReference(foreignClass, key);
		final List<T> returnValue = findBy(fieldName, lazy);
		
		// Do this so we can eager load the list and close the EM: 
		returnValue.size();
		
		close();
		return returnValue;
	}
   
	/**
	 * find-by method for unique attributes
	 * @param args the specified attribute name-value map
	 * @return the unique entity for the specified attributes
	 */
	@SuppressWarnings("unchecked")
#if( "1.5" != $sourceVersion )
   @Override
#end
	public final T findBy(Map<String,Object> args) {
	    final EntityManager em = getEntityManager();
	    final StringBuffer ql = new StringBuffer("SELECT t FROM ");
	    ql.append(getTableName());
	    ql.append(" t");
	    boolean isFirst = true;
	    for (Entry<String,Object> entry : args.entrySet()) {
	    	ql.append(isFirst ? " WHERE t." : " AND t.");
	    	isFirst = false;
	    	ql.append(entry.getKey());
	    	ql.append(" = :pP");
	    	ql.append(entry.getKey());
	    }
		final Query query =	em.createQuery(ql.toString());
	    for (Entry<String,Object> entry : args.entrySet()) {
	    	query.setParameter("pP" + entry.getKey(), entry.getValue());
	    }
	    try {
			final T returnValue = (T) query.getSingleResult();
			return returnValue;
		}
		catch (javax.persistence.NoResultException nre) {
		}
		finally {
			close();
		}
		return null;
	}

	/**
	 * find-by method for unique attributes
	 * @param args the specified attribute name-value map
	 * @param orderBy the attribute to order by
	 * @param ascending true if ascending
	 * @return the unique entity for the specified attributes
	 */
	@SuppressWarnings("unchecked")
#if( "1.5" != $sourceVersion )
   @Override
#end
	public List<T> findBy(Map<String,Object> args, String orderBy, boolean ascending) {
		return findBy(args, orderBy, ascending, -1, 0);
	}
	
	/**
	 * find-by method for unique attributes
	 * @param args the specified attribute name-value map
	 * @param orderBy the attribute to order by
	 * @param ascending true if ascending
	 * @return the unique entity for the specified attributes
	 */
	@SuppressWarnings("unchecked")
#if( "1.5" != $sourceVersion )
   @Override
#end
	public List<T> findBy(Map<String,Object> args, String orderBy, boolean ascending, int limit, int offset) {
	    final EntityManager em = getEntityManager();
	    final StringBuffer ql = new StringBuffer("SELECT t FROM ");
	    ql.append(getTableName());
	    ql.append(" t");
	    boolean isFirst = true;
	    for (Entry<String,Object> entry : args.entrySet()) {
	    	ql.append(isFirst ? " WHERE t." : " AND t.");
	    	isFirst = false;
	    	ql.append(entry.getKey());
	    	ql.append(" = :pP");
	    	ql.append(entry.getKey());
	    }
	    
	    if (null != orderBy) {
		    ql.append(" ORDER BY t.");
		    ql.append(orderBy);
		    ql.append(ascending ? " ASC" : " DESC");
		}
	    
	    // [LIMIT [<offset>,]<count>]
	    // [OFFSET <offset>]
	    if (0 < limit) {
	    	if (0 < offset) {
	    		ql.append(offset);
	    		ql.append(',');
	    	}
	    	
	    	ql.append(" LIMIT ");
	    	ql.append(limit);
	    }
	    else if (0 < offset) {
	    	ql.append(" OFFSET ");
	    	ql.append(offset); 
	    }
	    
		final Query query =	em.createQuery(ql.toString());
	    for (Entry<String,Object> entry : args.entrySet()) {
	    	query.setParameter("pP" + entry.getKey(), entry.getValue());
	    }
		final List<T> returnValue = query.getResultList();
		
		// Do this so we can eager load the list and close the EM: 
		returnValue.size();
		
		close();
		return returnValue;
	}
	
	/**
	 * find-by method for many-to-many fields
	 * @param primaryKeyName name of this entity class' primary key, e.g. "id"
	 * @param fieldName name of this side's column in the join table
	 * @param foreignSimpleClass name of the related entity class (simple name) e.g. "role"
	 * @param foreignFieldName name of the related side's column in the join table
	 * @param foreignId the related entity's primary key value
	 * @return a List of entities belonging to the many-to-many relation
	 */
	@SuppressWarnings("unchecked")
#if( "1.5" != $sourceVersion )
   @Override
#end
	public final List<T> findByManyToMany(String primaryKeyName,
			String fieldName, 
			String foreignSimpleClass, String foreignFieldName, Object foreignId) {
	    final EntityManager em = getEntityManager();
		final Query keyQuery =	em.createQuery("SELECT t." + fieldName + 
			" FROM " + getTableName() + "_" + foreignSimpleClass +  
				" t WHERE t." + foreignFieldName + " = :param");
		keyQuery.setParameter("param", foreignId);
		final List<ID> keyList = keyQuery.getResultList();
		
		final Query query = em.createQuery("SELECT t FROM " + getTableName() + 
			" t WHERE t." + primaryKeyName + " IN :param");
		query.setParameter("param", keyList);
		final List<T> returnValue = query.getResultList();
		
		// Do this so we can eager load the list and close the EM: 
		returnValue.size();
		
		close();
		return returnValue;
	}

#if( "1.5" != $sourceVersion )
   @Override
#end
   public List<T> findBy(String orderBy, boolean ascending, int limit, Expression... expressions) {
		LOG.debug("find" + persistentClass.getSimpleName() + "sBy(" + Arrays.toString(expressions) + ")");
		
		// build SQL
		final StringBuffer sql = new StringBuffer("SELECT t FROM ");
		sql.append(getTableName());
		sql.append(" t");
		
		// and arguments map
		boolean isFirst = true;
		int i = 0;
		final Map<String,Object> args = new HashMap<String,Object>();
		for (Expression ex : expressions) {
			sql.append(isFirst ? " WHERE t." : " AND t.");
			isFirst = false;
			sql.append(ex.getColumn());
			sql.append(' ');
			sql.append(ex.getOperation());
			sql.append(' ');
			String key = "operand" + i;
			sql.append(ex.getToken(key));
			args.put(key, ex.getOperand());
			i++;
		}

		if (null != orderBy) {
			sql.append(" ORDER BY t.");
			sql.append(orderBy);
			sql.append(ascending ? " ASC" : " DESC");
		}
		
		if (0 < limit) {
			sql.append(" LIMIT ");
			sql.append(limit);
		}
		
	    final EntityManager em = getEntityManager();
	    LOG.debug(sql.toString());
	    final Query query = em.createQuery(sql.toString());
	    
	    for (Entry<String, Object> entry : args.entrySet()) {
	    	query.setParameter(entry.getKey(), entry.getValue());
	    }
	    
		final List<T> returnValue = query.getResultList();
		
		// Do this so we can eager load the list and close the EM: 
		returnValue.size();
		
		close();
		return returnValue;
   }

#if( "1.5" != $sourceVersion )
   @Override
#end
   public T persist(Map<String, Object> nameValuePairs) {
      throw new UnsupportedOperationException("Not supported for JPA.");
   }

	/**
	 * Updates many rows in one go
	 * @param values new values for specified columns
     * @param expressions the specified column-operation-operand expressions
	 * @return number of modified rows
	 */	
#if( "1.5" != $sourceVersion )
   @Override
#end
	public int update(Map<String, Object> values, Expression... expressions) {
		final Map<String,Object> args = new HashMap<String,Object>();
		final StringBuffer sql = new StringBuffer("UPDATE ");
		sql.append(getTableName());
		sql.append(" SET ");
		
		int i = 0;
		for (Entry<String, Object> entry : values.entrySet()) {
			sql.append(entry.getKey());
			sql.append(" = :");
			sql.append(entry.getKey());
			if (i+1 < values.size()) {
				sql.append(", ");
			}
		}
		args.putAll(values);
	
		// and arguments map
		boolean isFirst = true;
		i = 0;
		for (Expression ex : expressions) {
			//  check that column exists
			if (!getColumnNames().contains(ex.getColumn())) {
				throw new IllegalArgumentException("No such WHERE column " + ex.getColumn());
			}
		
			sql.append(isFirst ? " WHERE " : " AND ");
			isFirst = false;
			sql.append(ex.getColumn());
			sql.append(' ');
			sql.append(ex.getOperation());
			sql.append(' ');
			String key = "operand" + i;
			sql.append(ex.getToken(key));
			args.put(key, ex.getOperand());
			i++;
		}
		
	    final EntityManager em = getEntityManager();
	    try {
			final EntityTransaction tx = beginTransaction();
			final String jql = sql.toString();
			LOG.debug(jql + ", " + args);
		    final Query query = em.createQuery(jql);
		    
		    for (Entry<String, Object> entry : args.entrySet()) {
		    	query.setParameter(entry.getKey(), entry.getValue());
		    }
		    
			int returnValue = query.executeUpdate();
			commitTransaction(tx);
			return returnValue;
		}
		finally {
			close();
		}
	}		

#if( "1.5" != $sourceVersion )
   @Override
#end
   public String getTableName() {
	   // FIXME: support @Table name annotation
      return persistentClass.getSimpleName();
   }

#if( "1.5" != $sourceVersion )
   @Override
#end
   public List<String> getColumnNames() {
      throw new UnsupportedOperationException("Not supported yet.");
   }

#if( "1.5" != $sourceVersion )
   @Override
#end
   public String getPrimaryKeyColumnName() {
      throw new UnsupportedOperationException("Not supported yet.");
   }
}
