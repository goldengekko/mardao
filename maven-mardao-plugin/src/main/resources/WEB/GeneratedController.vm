package ${controllerPackage};

import java.util.List;

import ${entity.className};
#foreach( $p in $parents )
import ${p.className};
#end	

import ${daoPackage}.${entity.simpleName}Dao;
#foreach( $p in $parents )
import ${daoPackage}.${p.simpleName}Dao;
#end	
#foreach( $field in $entity.manyToOnes )
import ${daoPackage}.${field.entity.simpleName}Dao;
#end	

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.support.WebBindingInitializer;
import org.springframework.web.context.request.WebRequest;

/**
 * Implementation of Controller related to entity ${entity.simpleName}.
 */
@Controller
@RequestMapping(value = "#foreach( $p in $ancestors )/${p.simpleName}/{${p.simpleName.toLowerCase()}}#end/${entity.simpleName}")
public abstract class Generated${entity.simpleName}Controller 
##	extends Generated${entity.simpleName}DaoImpl
		implements WebBindingInitializer
{
    protected static final Logger LOG = LoggerFactory.getLogger(Generated${entity.simpleName}Controller.class);

#if( $entity.parent )
	/** parent dao */
	protected ${entity.parent.entity.simpleName}Dao parentDao;
	
#end	
#foreach( $p in $ancestors )
	/** DAO for parent${velocityCount} ${p.simpleName} */
	protected ${p.simpleName}Dao parent${p.simpleName}Dao;
#end	
	/** dao for this entity */
	protected ${entity.simpleName}Dao ${helper.firstToLower($entity.simpleName)}Dao;
	
#foreach( $field in $entity.manyToOnes )
	/** DAO for Many-To-One ${field.name} relation */
	protected ${field.simpleType}Dao ${field.name}Dao;
#end	
	
//    @ModelAttribute(ProjectHandlerInterceptor.KEY_PROJNAME)
//    public Object populateProjName(HttpServletRequest request) {
//        return request.getAttribute(ProjectHandlerInterceptor.KEY_PROJNAME);
//    }
	
	protected final Object buildParentKey(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
		#end${p.pk.type} ${p.simpleName.toLowerCase()}#end) {
		Object parentKey = null;
#foreach( $p in $ancestors )
		// ${p.simpleName}
        final Object parent${p.simpleName}Key = parent${p.simpleName}Dao.createKey(parentKey, ${p.simpleName.toLowerCase()});
	    parentKey = parent${p.simpleName}Key;
#end
	    return parentKey;
	}

    @Override
    public void initBinder(WebDataBinder binder, WebRequest request) {
#foreach( $field in $entity.manyToOnes )	
        binder.registerCustomEditor(${field.entity.simpleType}.class, new PropertyEditorSupport() {
            @Override
            public void setAsText(String text) throws IllegalArgumentException {
				final Key fk = KeyFactory.stringToKey(text);
				final ${field.entity.simpleType} domain = new ${field.entity.simpleType}();
#if( ${field.entity.pk.type} == "java.lang.String" )
        domain.set${helper.firstToUpper(${field.entity.pk.name})}(fk.getName());
#elseif( ${field.entity.pk.type} == "java.lang.Long" )
        domain.set${helper.firstToUpper(${field.entity.pk.name})}(fk.getId());
#elseif( ${field.entity.pk.type} == "com.google.appengine.api.datastore.Key" )		
        domain.set${helper.firstToUpper(${field.entity.pk.name})}(fk);
#else
		throw new UnsupportedOperationException("Unsupported primary key type: ${field.entity.pk.type}");
#end
#if( $field.entity.parent )
		// parent
		domain.set${helper.firstToUpper(${entity.parent.name})}(fk.getParent());
#end
                setValue(domain);
                LOG.debug("Converted {} to {}", text, getValue());
            }
        });
#end		
    }

// ------------------- Common interface -----------------------------------

	/**
	 * Invoked when creating the ${entity.simpleName} Entity.
	 */
	@RequestMapping(value = "/create.html", method = RequestMethod.POST)
    public String create(Model model, @ModelAttribute("${entity.simpleName}") ${entity.simpleName} entity#foreach( $p in $ancestors ), 
		@PathVariable(value = "${p.simpleName.toLowerCase()}") ${p.pk.type} ${p.simpleName.toLowerCase()}#end) {
		LOG.debug("create {}", entity);

#if( $entity.parent )
		final Object parentKey = buildParentKey(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
			#end${p.simpleName.toLowerCase()}#end);
		entity.set${helper.firstToUpper($entity.parent.name)}((${entity.parent.type}) parentKey);

#end		
		${helper.firstToLower($entity.simpleName)}Dao.persist(entity);
        return "redirect:index.html";
    }

// ------------------- HTML interface -----------------------------------	

	/**
	 * Loads the create form for the ${entity.simpleName} Entity.
	 * This method is for root entities (without a parent)
	 */
	@RequestMapping(value = "/create.html", method = RequestMethod.GET)
    public String getCreateForm(Model model) {
		LOG.debug("get create form HTML");
#foreach( $field in $entity.manyToOnes )
		// populate ${field.name}s
		model.addAttribute("${field.name}s", ${field.name}Dao.findAll());
#end	
        return "create${entity.simpleName}";
    }
	
	/**
	 * Queries for all ${entity.simpleName} Entities and responds with HTML
	 * This method is for entities with parent(s)
	 */
	@RequestMapping(value = "index.html", method = RequestMethod.GET)
    public String getList(HttpServletRequest request, Model model#foreach( $p in $ancestors ), 
		@PathVariable(value = "${p.simpleName.toLowerCase()}") ${p.pk.type} ${p.simpleName.toLowerCase()}#end) {
		LOG.debug("list by parent");
		
		// for breadcrumbs:
        final String uri = request.getRequestURI();
        final String paths[] = uri.split("/");
		model.addAttribute("paths", paths);
		
		final List<${entity.simpleName}> list = getList(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
			#end${p.simpleName.toLowerCase()}#end);
        model.addAttribute("list", list);
        return "list${entity.simpleName}";
    }
	
#if( $entity.parent )
## ---------------------- This is an Entity with at least one parent ------------------------------------
	protected List<${entity.simpleName}> getList(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
		#end${p.pk.type} ${p.simpleName.toLowerCase()}#end) {
		final Object parentKey = buildParentKey(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
			#end${p.simpleName.toLowerCase()}#end);
        return ${helper.firstToLower($entity.simpleName)}Dao.findBy${helper.firstToUpper($entity.parent.name)}(parentKey);
	}
	
	/**
	 * Queries for the ${entity.simpleName} Entity (by primary key) and responds with HTML.
	 * This method is for entities with parent(s)
	 */
	@RequestMapping(value = "/{${entity.simpleName.toLowerCase()}}/index.html", method = RequestMethod.GET)
    public String getItemHtml(Model model#foreach( $p in $ancestors ), 
		@PathVariable(value = "${p.simpleName.toLowerCase()}") ${p.pk.type} ${p.simpleName.toLowerCase()}#end,
		@PathVariable(value = "${entity.simpleName.toLowerCase()}") ${entity.pk.type} ${entity.simpleName.toLowerCase()}) {
		LOG.debug("get item HTML");
		final Object parentKey = buildParentKey(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
			#end${p.simpleName.toLowerCase()}#end);
        final ${entity.simpleName} item = ${helper.firstToLower($entity.simpleName)}Dao.findByPrimaryKey(parentKey, ${entity.simpleName.toLowerCase()});
        model.addAttribute("item", item);
        return "item${entity.simpleName}";
    }
	
// ------------------- JSON interface -----------------------------------	
	
	/**
	 * Queries for all ${entity.simpleName} Entities and responds with JSON
	 * This method is for entities with parent(s)
	 */
    @RequestMapping(method = RequestMethod.GET, headers="accept=application/json")
    public ResponseEntity<${entity.simpleName}[]> getListAcceptJson(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
		#end@PathVariable(value = "${p.simpleName.toLowerCase()}") ${p.pk.type} ${p.simpleName.toLowerCase()}#end) {
		LOG.debug("list All Accept");
		final List<${entity.simpleName}> list = getList(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
			#end${p.simpleName.toLowerCase()}#end);
		return listJson(list);
	}
	
	/**
	 * Queries for all ${entity.simpleName} Entities and responds with JSON.
	 * This method is for entities with parent(s)
	 */
    @RequestMapping(value = "/index.json", method = RequestMethod.GET)
    public ResponseEntity<${entity.simpleName}[]> getListJson(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
		#end@PathVariable(value = "${p.simpleName.toLowerCase()}") ${p.pk.type} ${p.simpleName.toLowerCase()}#end) {
		LOG.debug("list All index.json");
		final List<${entity.simpleName}> list = getList(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
			#end${p.simpleName.toLowerCase()}#end);
		return listJson(list);
	}
	
	/**
	 * Queries for the ${entity.simpleName} Entity (by primary key) and responds with JSON.
	 * This method is for entities with parent(s)
	 */
    @RequestMapping(value = "/{${entity.pk.name}}/index.json", method = RequestMethod.GET)
    public ResponseEntity<${entity.simpleName}> getItemJson(#foreach( $p in $ancestors )@PathVariable(value = "${p.simpleName.toLowerCase()}") ${p.pk.type} ${p.simpleName.toLowerCase()},
		#end
		@PathVariable(value = "${entity.pk.name}") ${entity.pk.type} ${entity.pk.name}) {
		LOG.debug("get child item {}", ${entity.pk.name});
		final Object parentKey = buildParentKey(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
			#end${p.simpleName.toLowerCase()}#end);
        final ${entity.simpleName} body = ${helper.firstToLower($entity.simpleName)}Dao.findByPrimaryKey(parentKey, ${entity.pk.name});
		return respond(body);
	}
	
// ------------------- Parent setters -----------------------------------	
	public final void setParentDao(${entity.parent.entity.simpleName}Dao parentDao) {
		this.parentDao = parentDao;
	}
	
#foreach( $p in $ancestors )
    public final void setParent${p.simpleName}Dao(${p.simpleName}Dao parentDao) {
	    this.parent${p.simpleName}Dao = parentDao;
	}
	
#end

#else
## ---------------------- This is a Root Entity without a parent ------------------------------------

	protected List<${entity.simpleName}> getList() {
        return ${helper.firstToLower($entity.simpleName)}Dao.findAll();
	}
	
// ------------------- HTML interface -----------------------------------	

	/**
	 * Queries for the ${entity.simpleName} Entity (by primary key) and responds with HTML.
	 * This method is for root entities (without a parent)
	 */
	@RequestMapping(value = "/{${entity.pk.name}}/index.html", method = RequestMethod.GET)
    public String getItemHtml(Model model, @PathVariable(value = "${entity.pk.name}") ${entity.pk.type} ${entity.pk.name}) {
		LOG.debug("get item HTML");
        final ${entity.simpleName} item = ${helper.firstToLower($entity.simpleName)}Dao.findByPrimaryKey(${entity.pk.name});
        model.addAttribute("item", item);
        return "item${entity.simpleName}";
    }
	
// ------------------- JSON interface -----------------------------------	

	/**
	 * Queries for all ${entity.simpleName} Entities and responds with JSON.
	 * This method is for root entities (without a parent)
	 */
    @RequestMapping(value = "/list.json", method = RequestMethod.GET, headers="accept=application/json")
    public ResponseEntity<${entity.simpleName}[]> getListAcceptJson() {
		LOG.debug("list All Accept");
        final List<${entity.simpleName}> list = ${helper.firstToLower($entity.simpleName)}Dao.findAll();
		return listJson(list);
	}
	
	/**
	 * Queries for all ${entity.simpleName} Entities and responds with JSON.
	 * This method is for root entities (without a parent)
	 */
    @RequestMapping(value = "/index.json", method = RequestMethod.GET)
    public ResponseEntity<${entity.simpleName}[]> getListJson() {
		LOG.debug("list All index.json");
        final List<${entity.simpleName}> list = ${helper.firstToLower($entity.simpleName)}Dao.findAll();
		return listJson(list);
	}
	
	/**
	 * Queries for the ${entity.simpleName} Entity (by primary key) and responds with JSON.
	 * This method is for root entities (without a parent)
	 */
    @RequestMapping(value = "/{${entity.pk.name}}/index.json", method = RequestMethod.GET)
    public ResponseEntity<${entity.simpleName}> getItemJson(@PathVariable(value = "${entity.pk.name}") ${entity.pk.type} ${entity.pk.name}) {
		LOG.debug("get root item {}", ${entity.pk.name});
        final ${entity.simpleName} body = ${helper.firstToLower($entity.simpleName)}Dao.findByPrimaryKey(${entity.pk.name});
		return respond(body);
	}
	
#end	

	protected final ResponseEntity<${entity.simpleName}[]>  listJson(List<${entity.simpleName}> list) {
        final ${entity.simpleName}[] body = list.toArray(new ${entity.simpleName}[list.size()]);
		return respond(body);
	}
	
	protected static final <B extends Object> ResponseEntity<B> respond(B body, HttpStatus okStatus, HttpStatus nullStatus) {
		if (null != body) {
			return new ResponseEntity<B>(body, okStatus);
		}
		return new ResponseEntity<B>((MultiValueMap<java.lang.String,java.lang.String>) null, nullStatus);
	}
	
	protected static final <B extends Object> ResponseEntity<B> respond(B body) {
		return respond(body, HttpStatus.OK, HttpStatus.NOT_FOUND);
	}
	
	

// ------------------- DAO setter for this Entity -----------------------------------	
	public final void set${entity.simpleName}Dao(${entity.simpleName}Dao dao) {
		this.${helper.firstToLower($entity.simpleName)}Dao = dao;
	}
	
#foreach( $field in $entity.manyToOnes )
	/** Setter for Many-To-One relation DAO */
	public final void set${helper.firstToUpper($field.name)}Dao(${field.entity.simpleName}Dao dao) {
		${field.name}Dao = dao;
	}
#end	
}
