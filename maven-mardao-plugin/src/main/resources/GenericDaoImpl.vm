package ${daoBasePackage};

import java.io.Serializable;
import java.util.List;
import java.util.Map;

/**
 * Abstract implementation of GenericDao interface methods.
 *
 * Generated on ${currentDate}.
 * @author mardao DAO generator (${helper.class.name})
 */
public abstract class GenericDaoImpl<T, ID extends Serializable> 
	implements GenericDao<T, ID> 
{
	/** The specific helper reference */
	protected AbstractHelper<T, ID> genericDao;
	
	/**
	 * Setter for the AbstractHelper attribute
	 */
	public void setHelper(AbstractHelper<T, ID> genericDao) {
		this.genericDao = genericDao;
	}

	// ----------------------- generic implements -------------------------
	
	/**
	 * @param limit set to -1 for no LIMIT clause
	 */
    protected List<T> findBy(String orderBy, boolean ascending, int limit, Expression... expressions) {
        return genericDao.findBy(orderBy, ascending, limit, expressions);
    }

	protected T populate(String uniqueFieldName, Object value, Map<String, Object> nameValuePairs) {
		T entity = genericDao.findUniqueBy(uniqueFieldName, value);
		if (null == entity) {
			// make sure unique value exists in map:
			nameValuePairs.put(uniqueFieldName, value);
			
			// now, persist using Map:
			entity = genericDao.persist(nameValuePairs);
		}
		return entity;
	}
	
	// ----------------------- implements GenericDao -------------------------
	
	public T findByPrimaryKey(ID id) {
		return genericDao.findByPrimaryKey(id);
	}
	
	public void persist(T entity) {
		genericDao.persist(entity);
	}
	
	public void update(T entity) {
		genericDao.update(entity);
	}
	
	public void delete(T entity) {
		genericDao.delete(entity);
	}
	
	public List<T> findAll() {
		return genericDao.findAll();
	}
	
}
