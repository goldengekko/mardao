package ${daoBasePackage};

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.log4j.Logger;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcOperations;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;
import org.springframework.jdbc.support.incrementer.DataFieldMaxValueIncrementer;

public abstract class AbstractSpringHelper<T, ID extends Serializable>  implements AbstractHelper<T, ID> {

   protected final Class<T> persistentClass;
	/** the Spring SimpleJDBC template */
	protected SimpleJdbcTemplate template;
	
	/** Spring inserter */
	protected SimpleJdbcInsert insert;
	
	/** Used to generate unique ids */
	protected DataFieldMaxValueIncrementer incrementer;
	
	/** Log4j Logger */
	protected final Logger LOGGER = Logger.getLogger(getClass());

   public AbstractSpringHelper(Class<T> type) {
      this.persistentClass = type;
   }
   
   protected abstract String getTableName();
   protected abstract String getPrimaryKeyColumnName();
   protected abstract List<String> getColumnNames();
   protected abstract RowMapper<T> getRowMapper();   
   
	/**
	 * Used for test purposes and for creating tables on-deploy
	 */
	protected JdbcOperations getJdbcOperations()
	{
		return template.getJdbcOperations();
	}
	
	/**
	 * Used for MaxValueIncrementer injection
	 * @param maxValueIncrementer the DataFieldMaxValueIncrementer to inject
	 */
	public void setMaxValueIncrementer(DataFieldMaxValueIncrementer maxValueIncrementer)	
	{
		incrementer = maxValueIncrementer;
	}
	
	/**
	 * Creates the database tables, if necessary
	 */
	public void checkTables() {
		try
		{
			// check for any entity:
			findAll();
		}
		catch (org.springframework.jdbc.BadSqlGrammarException e)
		{
			LOGGER.info("CREATE TABLE for " + persistentClass.getSimpleName());
			InputStream in = getClass().getResourceAsStream("/MySQL/CREATE-" + 
				persistentClass.getSimpleName() + ".sql");
			if (null != in)
			{
				try {
					executeOperations(in);
					
					// create incrementer and version tables?
					checkTable("id_sequence", "create table id_sequence (highest int not null) type=MYISAM;", 
						"insert into id_sequence values(0);");
					checkTable("db_version", "create table db_version (currentVersion int not null) type=MYISAM;",
						"insert into db_version values(1);");

				} catch (IOException e1) {
					e1.printStackTrace();
					throw e;
				}
			}
			else { 
				throw e;
			}
		}
	}
	
	private void checkTable(String tableName, String create, String insert) throws org.springframework.jdbc.BadSqlGrammarException {
		try
		{
			// check for table:
			executeOperations("SELECT 1 FROM " + tableName);
		}
		catch (org.springframework.jdbc.BadSqlGrammarException e)
		{
			LOGGER.info("CREATE TABLE for " + tableName);
			executeOperations(create);
			executeOperations(insert);
		}
	}
	
	/** Logs and executes from the specified InputStream */
	protected void executeOperations(final InputStream in) throws IOException
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(in));
		StringBuffer sql = new StringBuffer();
		String s = br.readLine().trim();
		
		while (null != s)
		{
			if (false == s.startsWith("--")) {
				sql.append(s);
				if (s.endsWith(";"))
				{
					sql.deleteCharAt(sql.length()-1);
					try
					{
						executeOperations(sql.toString());
					}
					catch (org.springframework.jdbc.BadSqlGrammarException e2)
					{
						LOGGER.warn(e2.getMessage());
					}
					sql.setLength(0);
				}
			}
			
			s = br.readLine();
		}
	}
	
	/** Logs and executes the specified sql String */
	protected void executeOperations(final String sql) throws org.springframework.jdbc.BadSqlGrammarException
	{
		final JdbcOperations ops = getJdbcOperations();
		LOGGER.info(sql);
		ops.execute(sql);
	}
	
	/** Logs and queries the specified sql String */
	protected int queryForInt(final String sql) throws org.springframework.jdbc.BadSqlGrammarException
	{
		final JdbcOperations ops = getJdbcOperations();
		LOGGER.info(sql);
		return ops.queryForInt(sql);
	}
	
	/** Logs and updates the specified sql String */
	protected void updateOperations(final String sql) throws org.springframework.jdbc.BadSqlGrammarException
	{
		final JdbcOperations ops = getJdbcOperations();
		LOGGER.info(sql);
		ops.update(sql);
	}
	
   
   /**
    * Override to implement specific EntityManager factory functionality
    * @see getEntityManager
    */
   public void close() {
#if( $containerManagedEntityManager )
      // As the EntityManager is managed by the Container,
      // we should do nothing here.
      // This setting is controlled by generator plugin configuration <containerManagedEntityManager>.
#else
      // close?
#end      
	}   

   protected Class<T> getPersistentClass() {
      return persistentClass;
   }
   
	/**
	 * Used to replace 0-valued foreign keys
	 * with a null value. Used in the
	 * insert() and update() implementations.
	 * @param id the long foreign key value
	 * @return null if id is 0, id otherwise 
	 */	
	protected Long toForeignKey(long id)
	{
		return java.sql.Types.NULL == id ? null : id;
	}

	/**
	 * Simply returns the specified key, used for overloading.
	 * @param key the foreign key value
	 * @return the specified key 
	 */	
	protected Object toForeignKey(Object key)
	{
		return key;
	}

   // ------ GenericDao implementation -----------------------------

   public T findByPrimaryKey(ID id) {
   		return findUniqueBy(getPrimaryKeyColumnName(), id);
   }

   public List<T> findAll() {
		LOGGER.debug("findAll()");

		final String sql = "SELECT * FROM " + getTableName();
		return template.query(sql, getRowMapper());
   }
   
   // ------ AbstractHelper implementation -----------------------------

	/**
	 * find-by method for generic unique attribute field 
	 * @param fieldName the generic unique attribute's field name
	 * @param param the generic unique attribute
	 * @return the unique entity for the specified attribute
	 */
	// @SuppressWarnings("unchecked")
	public final T findUniqueBy(String fieldName, Object param) {
		if (!getColumnNames().contains(fieldName))
		{
			throw new IllegalArgumentException("No such UNIQUE BY column " + fieldName);
		}
	    
		T entity = null;
		final String sql = "SELECT * FROM " + getTableName() + " WHERE " + fieldName + " = ?";
		LOGGER.debug("find" + persistentClass.getSimpleName() + "By_" + fieldName + "(): " + param);

		try {
			entity = template.queryForObject(sql.toString(), getRowMapper(), param);
		} catch (EmptyResultDataAccessException e) {}
		return entity;
	}
	
	/**
	 * find-by method for generic attribute field
	 * @param fieldName the generic unique attribute's field name
	 * @param param the specified generic attribute
	 * @return a List of entities with the specified attribute
	 */
	public final List<T> findBy(String fieldName, Object param) {
		if (!getColumnNames().contains(fieldName))
		{
			throw new IllegalArgumentException("No such WHERE column " + fieldName);
		}
	    
		final String sql = "SELECT * FROM " + getTableName() + " WHERE " + fieldName + " = ?";
		LOGGER.debug("findBy(" + fieldName + "): " + sql + ", " + param);

		final List<T> list = template.query(sql.toString(), getRowMapper(), param);
		return list;
	}
	
	/**
	 * find-by method for generic field
	 * @param fieldName the generic unique attribute's field name
	 * @param foreignClass the related entity's class
	 * @param key the specified foreign key
	 * @return a List of entities with the specified foreign key
	 */
	@SuppressWarnings("unchecked")
	public final List<T> findByKey(String fieldName, Class foreignClass, Object key) {
		return findBy(fieldName, key);
	}
   
	/**
	 * find-by method for unique attributes
	 * @param args the specified attribute name-value map
	 * @return the unique entity for the specified attributes
	 */
	public T findBy(Map<String,Object> args) {
		if (!getColumnNames().containsAll(args.keySet()))
		{
			throw new IllegalArgumentException("No such FIND BY column " + args);
		}
	    
		LOGGER.debug("findBy(" + args + ")");
		T entity = null;
		final StringBuffer sql = new StringBuffer("SELECT * FROM ");
		sql.append(getTableName());
		boolean isFirst = true;
		for (Entry<String,Object> entry : args.entrySet()) {
			sql.append(isFirst ? " WHERE " : " AND ");
			isFirst = false;
			sql.append(entry.getKey());
			sql.append(" = :");
			sql.append(entry.getKey());
		}

		try {
			entity = template.queryForObject(sql.toString(), getRowMapper(), args);
		} catch (EmptyResultDataAccessException e) {}
		return entity;
	}

	/**
	 * find-by method for unique attributes
	 * @param args the specified attribute name-value map
	 * @param orderBy the attribute to order by
	 * @param ascending true if ascending
	 * @return the unique entity for the specified attributes
	 */
	public List<T> findBy(Map<String,Object> args, String orderBy, boolean ascending) {
		LOGGER.debug("findBy(" + args + ")");
		if (null != orderBy && !getColumnNames().contains(orderBy))
		{
			throw new IllegalArgumentException("No such ORDER BY column " + orderBy);
		}
		if (!getColumnNames().containsAll(args.keySet())) {
			throw new IllegalArgumentException("No such WHERE column " + args.keySet());
		}
		
		final StringBuffer sql = new StringBuffer("SELECT * FROM ");
		sql.append(getTableName());
		boolean isFirst = true;
		for (Entry<String,Object> entry : args.entrySet()) {
			sql.append(isFirst ? " WHERE " : " AND ");
			isFirst = false;
			sql.append(entry.getKey());
			sql.append(" = :");
			sql.append(entry.getKey());
		}

		if (null != orderBy) {
			sql.append(" ORDER BY ");
			sql.append(orderBy);
			sql.append(ascending ? " ASC" : " DESC");
		}
		
		final List<T> returnValue = template.query(sql.toString(), getRowMapper(), args);
		
		return returnValue;
	}
	
    /**
     * find-by method for unique attributes
     * @param orderBy the attribute to order by
     * @param ascending true if ascending
	 * @param limit set to -1 for no LIMIT clause
     * @param expressions the specified column-operation-operand expressions
     * @return the matching entities for the specified attributes
     */
    public List<T> findBy(String orderBy, boolean ascending, int limit, Expression... expressions) {
		LOGGER.debug("find" + persistentClass.getSimpleName() + "sBy(" + expressions + ")");
		if (null != orderBy && !getColumnNames().contains(orderBy))
		{
			throw new IllegalArgumentException("No such ORDER BY column " + orderBy);
		}
		
		// build SQL
		final StringBuffer sql = new StringBuffer("SELECT * FROM ");
		sql.append(getTableName());
		
		// and arguments map
		boolean isFirst = true;
		int i = 0;
		final Map<String,Object> args = new HashMap<String,Object>();
		for (Expression ex : expressions) {
			//  check that column exists
			if (!getColumnNames().contains(ex.getColumn())) {
				throw new IllegalArgumentException("No such WHERE column " + ex.getColumn());
			}
		
			sql.append(isFirst ? " WHERE " : " AND ");
			isFirst = false;
			sql.append(ex.getColumn());
			sql.append(ex.getOperation());
			sql.append(" :operand");
			sql.append(i);
			args.put("operand"+i, ex.getOperand());
			i++;
		}

		if (null != orderBy) {
			sql.append(" ORDER BY ");
			sql.append(orderBy);
			sql.append(ascending ? " ASC" : " DESC");
		}
		
		if (0 < limit) {
			sql.append(" LIMIT ");
			sql.append(limit);
		}
		
		final List<T> returnValue = template.query(sql.toString(), getRowMapper(), args);
		
		return returnValue;
	}
	
	/**
	 * find-by method for many-to-many fields
	 * @param primaryKeyName name of this entity class' primary key, e.g. "id"
	 * @param fieldName name of this side's column in the join table
	 * @param foreignSimpleClass name of the related entity class (simple name) e.g. "role"
	 * @param foreignFieldName name of the related side's column in the join table
	 * @param foreignId the related entity's primary key value
	 * @return a List of entities belonging to the many-to-many relation
	 */
	//@SuppressWarnings("unchecked")
	public final List<T> findByManyToMany(String primaryKeyName, 
			String fieldName, 
			String foreignSimpleClass, String foreignFieldName, Object foreignId) {
		// TODO: implement
	    //final EntityManager em = getEntityManager();
		//final Query keyQuery =	em.createQuery("SELECT t." + fieldName + 
		//	" FROM " + getTableName() + "_" + foreignSimpleClass +  
		//		" t WHERE t." + foreignFieldName + " = :param");
		//keyQuery.setParameter("param", foreignId);
		//final List<ID> keyList = keyQuery.getResultList();
		
		//final Query query = em.createQuery("SELECT t FROM " + persistentClass.getName() + 
		//	" t WHERE t." + primaryKeyName + " IN :param");
		//query.setParameter("param", keyList);
		final List<T> returnValue = null; //query.getResultList();
		
		// Do this so we can eager load the list and close the EM: 
		//returnValue.size();
		
		//close();
		return returnValue;
	}
		
}
