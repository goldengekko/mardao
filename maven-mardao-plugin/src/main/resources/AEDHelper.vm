package ${daoBasePackage};

import java.util.List;

import com.google.appengine.api.datastore.Entity;

import ${entity.className};
#foreach( $field in $entity.oneToOnes )
import ${field.entity.className};
#end
#foreach( $field in $entity.manyToOnes )
import ${field.entity.className};
#end

/**
 * Concrete class without generics, for Spring container instatiation.
 */
public class ${entity.simpleName}AEDHelper extends AbstractAEDHelper<${entity.simpleName}, ${entity.pk.type}> {

	/** Table name for ${entity.simpleName} is "${entity.tableName}" */
	public static final String TABLE_NAME = "${entity.tableName}";

	/** Column name for primary key attribute is "${entity.pk.columnName}" */
	protected static final String COLUMN_NAME_${entity.pk.name.toUpperCase()} = Abstract${entity.simpleName}DaoInterface.COLUMN_NAME_${entity.pk.name.toUpperCase()};

#foreach( $field in $entity.allFields )
	/** Column name for attribute ${field.name} is "${field.columnName}" */
	protected static final String COLUMN_NAME_${field.name.toUpperCase()} = Abstract${entity.simpleName}DaoInterface.COLUMN_NAME_${field.name.toUpperCase()};
#end

	/** The list of attribute names */
	protected static final List<String> COLUMN_NAMES = Abstract${entity.simpleName}DaoInterface.COLUMN_NAMES;

	/** Default constructor */
   public ${entity.simpleName}AEDHelper() {
      super(); // ${entity.simpleName}.class);
   }
   
   public String getTableName() {
   		return TABLE_NAME;
   }
   
   public String getPrimaryKeyColumnName() {
   		return COLUMN_NAME_${entity.pk.name.toUpperCase()};
   }
   
   public List<String> getColumnNames() {
        return COLUMN_NAMES;
   }
   
	
   // ------ AbstractSpringHelper overrides -----------------------------
   

   // ------ GenericDao implementation -----------------------------

	/**
	 * Inserts a ${entity.simpleName} instance. The primary key attribute of the instance is updated.
	 *
	 * @param entity the ${entity.simpleName} entity to insert
	 */
#if( $sourceVersion != "1.5" )
   @Override
#end
   public void persist(${entity.simpleName} domain) {
		LOGGER.debug("persisting {} with Id of type ${entity.pk.type}", domain);
		
#if( ${entity.pk.type} == "java.lang.String" )
		final Entity entity = new Entity(getTableName(), domain.get${helper.firstToUpper(${entity.pk.name})}());
#else
		final Entity entity = new Entity(getTableName());
#if( ${entity.pk.type} != "com.google.appengine.api.datastore.Key" )		
		entity.setProperty(COLUMN_NAME_${entity.pk.name.toUpperCase()}, domain.get${helper.firstToUpper(${entity.pk.name})}());
#end
#end
		// properties
#foreach( $field in $entity.fields )
		entity.setProperty(COLUMN_NAME_${field.name.toUpperCase()}, domain.get${helper.firstToUpper($field.name)}());
#end

		// one-to-one keys:
#foreach( $field in $entity.oneToOnes )
		final ${field.type} ${field.name} = domain.get${helper.firstToUpper($field.name)}();
		if (null != ${field.name}) {
			entity.setProperty(COLUMN_NAME_${field.name.toUpperCase()}, toForeignKey(${field.name}.get${helper.firstToUpper($field.entity.pk.name)}()));
		}
#end

		// many-to-one keys:
#foreach( $field in $entity.manyToOnes )
		final ${field.type} ${field.name} = domain.get${helper.firstToUpper($field.name)}();
		if (null != ${field.name}) {
			entity.setProperty(COLUMN_NAME_${field.name.toUpperCase()}, toForeignKey(${field.name}.get${helper.firstToUpper($field.entity.pk.name)}()));
		}
#end

#if( ${entity.pk.type} == "com.google.appengine.api.datastore.Key" )
		// update domain object with generated Key
		domain.set${helper.firstToUpper($entity.pk.name)}(persist(entity));		
#else
		persist(entity);
#end		
   }
   
	/**
	 * Updates a ${entity.simpleName} instance. 
	 * The primary key must not be changed.
	 *
	 * @param entity the instance to update
	 */
    public void update(final ${entity.simpleName} entity) {
		LOGGER.debug("update(" + entity + ")");
	}
	
   public void delete(${entity.simpleName} entity) {
		LOGGER.debug("delete(" + entity + ")");
   }

}
