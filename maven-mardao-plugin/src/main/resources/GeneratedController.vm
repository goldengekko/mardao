package ${controllerPackage};

import java.util.List;

import ${entity.className};
#foreach( $p in $parents )
import ${p.className};
#end	

import ${daoPackage}.${entity.simpleName}Dao;
#foreach( $p in $parents )
import ${daoPackage}.${p.simpleName}Dao;
#end	

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
/**
 * Implementation of Controller related to entity ${entity.simpleName}.
 */
@Controller
@RequestMapping(value = "#foreach( $p in $ancestors )/${p.simpleName}/{${p.simpleName.toLowerCase()}}#end/${entity.simpleName}")
public abstract class Generated${entity.simpleName}Controller 
##	extends Generated${entity.simpleName}DaoImpl
##		implements ${entity.simpleName}Dao 
{
    protected static final Logger LOG = LoggerFactory.getLogger(Generated${entity.simpleName}Controller.class);

#if( $entity.parent )
	/** parent dao */
	protected ${entity.parent.entity.simpleName}Dao parentDao;
	
#end	
#foreach( $p in $ancestors )
	/** DAO for parent${velocityCount} ${p.simpleName} */
	protected ${p.simpleName}Dao parent${p.simpleName}Dao;
#end	
	/** dao for this entity */
	protected ${entity.simpleName}Dao dao;
	
	
//    @ModelAttribute(ProjectHandlerInterceptor.KEY_PROJNAME)
//    public Object populateProjName(HttpServletRequest request) {
//        return request.getAttribute(ProjectHandlerInterceptor.KEY_PROJNAME);
//    }
	
#if( $entity.parent )
## ---------------------- This is an Entity with at least one parent ------------------------------------
	protected List<${entity.simpleName}> getList(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
		#end${p.pk.type} ${p.simpleName.toLowerCase()}#end) {
		Object parentKey = null;
#foreach( $p in $ancestors )
		// ${p.simpleName}
        final Object parent${p.simpleName}Key = parent${p.simpleName}Dao.createKey(parentKey, ${p.simpleName.toLowerCase()});
	    parentKey = parent${p.simpleName}Key;
#end
	    // list
        return dao.findBy${entity.parent.entity.simpleName}(parentKey);
	}
	
// ------------------- HTML interface -----------------------------------	

	/**
	 * Queries for all ${entity.simpleName} Entities and responds with HTML
	 * This method is for entities with parent(s)
	 */
	@RequestMapping(value = "index.html", method = RequestMethod.GET)
    public String getList(Model model#foreach( $p in $ancestors ), 
		@PathVariable(value = "${p.simpleName.toLowerCase()}") ${p.pk.type} ${p.simpleName.toLowerCase()}#end) {
		LOG.debug("list by parent");
		final List<${entity.simpleName}> list = getList(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
			#end${p.simpleName.toLowerCase()}#end);
        model.addAttribute("list", list);
        return "list";
    }
	
// ------------------- JSON interface -----------------------------------	
	
	/**
	 * Queries for all ${entity.simpleName} Entities and responds with JSON
	 * This method is for entities with parent(s)
	 */
    @RequestMapping(method = RequestMethod.GET, headers="accept=application/json")
    public ResponseEntity<${entity.simpleName}[]> getListAcceptJson(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
		#end@PathVariable(value = "${p.simpleName.toLowerCase()}") ${p.pk.type} ${p.simpleName.toLowerCase()}#end) {
		LOG.debug("list All Accept");
		final List<${entity.simpleName}> list = getList(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
			#end${p.simpleName.toLowerCase()}#end);
		return listJson(list);
	}
	
	/**
	 * Queries for all ${entity.simpleName} Entities and responds with JSON.
	 * This method is for entities with parent(s)
	 */
    @RequestMapping(value = "/index.json", method = RequestMethod.GET)
    public ResponseEntity<${entity.simpleName}[]> getListJson(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
		#end@PathVariable(value = "${p.simpleName.toLowerCase()}") ${p.pk.type} ${p.simpleName.toLowerCase()}#end) {
		LOG.debug("list All index.json");
		final List<${entity.simpleName}> list = getList(#foreach( $p in $ancestors )#if( $velocityCount != 1 ), 
			#end${p.simpleName.toLowerCase()}#end);
		return listJson(list);
	}
	
// ------------------- Parent setters -----------------------------------	
	public final void setParentDao(${entity.parent.entity.simpleName}Dao parentDao) {
		this.parentDao = parentDao;
	}
	
#foreach( $p in $ancestors )
    public final void setParent${p.simpleName}Dao(${p.simpleName}Dao parentDao) {
	    this.parent${p.simpleName}Dao = parentDao;
	}
	
#end

#else
## ---------------------- This is a Root Entity without a parent ------------------------------------
// ------------------- HTML interface -----------------------------------	

	/**
	 * Queries for all ${entity.simpleName} Entities and responds with HTML.
	 * This method is for root entities (without a parent)
	 */
	@RequestMapping(value = "/index.html", method = RequestMethod.GET)
    public String getListHtml(Model model) {
		LOG.debug("list All HTML");
        final List<${entity.simpleName}> list = dao.findAll();
        model.addAttribute("list", list);
        return "list";
    }
	
// ------------------- JSON interface -----------------------------------	

	/**
	 * Queries for all ${entity.simpleName} Entities and responds with JSON.
	 * This method is for root entities (without a parent)
	 */
    @RequestMapping(value = "/list.json", method = RequestMethod.GET, headers="accept=application/json")
    public ResponseEntity<${entity.simpleName}[]> getListAcceptJson() {
		LOG.debug("list All Accept");
        final List<${entity.simpleName}> list = dao.findAll();
		return listJson(list);
	}
	
	/**
	 * Queries for all ${entity.simpleName} Entities and responds with JSON.
	 * This method is for root entities (without a parent)
	 */
    @RequestMapping(value = "/index.json", method = RequestMethod.GET)
    public ResponseEntity<${entity.simpleName}[]> getListJson() {
		LOG.debug("list All index.json");
        final List<${entity.simpleName}> list = dao.findAll();
		return listJson(list);
	}
	
	/**
	 * Queries for the ${entity.simpleName} Entity (by primary key) and responds with JSON.
	 * This method is for root entities (without a parent)
	 */
    @RequestMapping(value = "/{${entity.pk.name}}/index.json", method = RequestMethod.GET)
    public ResponseEntity<${entity.simpleName}> getItemJson(@PathVariable(value = "${entity.pk.name}") ${entity.pk.type} ${entity.pk.name}) {
		LOG.debug("get item {}", ${entity.pk.name});
        final ${entity.simpleName} body = dao.findByPrimaryKey(${entity.pk.name});
		if (null != body) {
			return new ResponseEntity<${entity.simpleName}>(body, HttpStatus.OK);
		}
		return new ResponseEntity<${entity.simpleName}>((MultiValueMap<java.lang.String,java.lang.String>) null, HttpStatus.NOT_FOUND);
	}
	
#end	

	protected final ResponseEntity<${entity.simpleName}[]>  listJson(List<${entity.simpleName}> list) {
        final ${entity.simpleName}[] body = list.toArray(new ${entity.simpleName}[list.size()]);
        ResponseEntity<${entity.simpleName}[]> returnValue = new ResponseEntity<${entity.simpleName}[]>(body, HttpStatus.OK);
        return returnValue;
	}

// ------------------- DAO setter for this Entity -----------------------------------	
	public final void setDao(${entity.simpleName}Dao dao) {
		this.dao = dao;
	}
}
