package ${daoBasePackage};

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.sql.DataSource;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.simple.ParameterizedRowMapper;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;

import ${entity.className};
#foreach( $field in $entity.oneToOnes )
import ${field.entity.className};
#end
#foreach( $field in $entity.manyToOnes )
import ${field.entity.className};
#end
/**
 * Concrete class without generics, for Spring container instatiation.
 */
public class ${entity.simpleName}SpringHelper extends AbstractSpringHelper<${entity.simpleName}, ${entity.pk.type}> {

	/** Table name for ${entity.simpleName} is "${entity.tableName}" */
	public static final String TABLE_NAME = "${entity.tableName}";

	/** Column name for primary key attribute is "${entity.pk.columnName}" */
	protected static final String COLUMN_NAME_${entity.pk.name.toUpperCase()} = Abstract${entity.simpleName}DaoInterface.COLUMN_NAME_${entity.pk.name.toUpperCase()};

#foreach( $field in $entity.allFields )
	/** Column name for attribute ${field.name} is "${field.columnName}" */
	protected static final String COLUMN_NAME_${field.name.toUpperCase()} = Abstract${entity.simpleName}DaoInterface.COLUMN_NAME_${field.name.toUpperCase()};
#end

	/** The list of attribute names */
	protected static final List<String> COLUMN_NAMES = Abstract${entity.simpleName}DaoInterface.COLUMN_NAMES;

	/** Default constructor */
   public ${entity.simpleName}SpringHelper() {
      super(${entity.simpleName}.class);
   }
   
	/** 
	 * Used for DataSource injection
	 * @param dataSource the DataSource to inject
	 */
	public void setDataSource(DataSource dataSource) {
		LOGGER.info("setDataSource " + ((org.apache.commons.dbcp.BasicDataSource) dataSource).getUrl() + ' ' + getTableName());
		template = new SimpleJdbcTemplate(dataSource);
	
      // create the JDBC insert with specific columns and table name:
		insert = new SimpleJdbcInsert(dataSource)
			.withTableName(getTableName())
			.usingColumns(COLUMN_NAME_${entity.pk.name.toUpperCase()}#foreach( $field in $entity.fields )
, COLUMN_NAME_${field.name.toUpperCase()}#end
#foreach( $field in $entity.oneToOnes )
, COLUMN_NAME_${field.name.toUpperCase()}#end
#foreach( $field in $entity.manyToOnes )
, COLUMN_NAME_${field.name.toUpperCase()}#end);
   }
   
   public String getTableName() {
   		return TABLE_NAME;
   }
   
   public String getPrimaryKeyColumnName() {
   		return COLUMN_NAME_${entity.pk.name.toUpperCase()};
   }
   
   public List<String> getColumnNames() {
        return COLUMN_NAMES;
   }
   
	/** Mapper for the ${entity.simpleName} row retrieval */
	private static final ParameterizedRowMapper<${entity.simpleName}> MAPPER = 
		new ParameterizedRowMapper<${entity.simpleName}>() {
		public ${entity.simpleName} mapRow(ResultSet rs, int rowNum) throws SQLException {
			final ${entity.simpleName} entity = new ${entity.simpleName}();
#set( $field = $entity.pk )
			entity.set${helper.firstToUpper($field.name)}(rs.get${helper.firstToUpper($field.simpleType)}(COLUMN_NAME_${field.name.toUpperCase()}));
#foreach( $field in $entity.fields )
#if( $field.simpleType == "Date" )
			entity.set${helper.firstToUpper($field.name)}(rs.getTimestamp(COLUMN_NAME_${field.name.toUpperCase()}));
#elseif( $field.simpleType == "Integer")
			entity.set${helper.firstToUpper($field.name)}(rs.getInt(COLUMN_NAME_${field.name.toUpperCase()}));
#else
			entity.set${helper.firstToUpper($field.name)}(rs.get${helper.firstToUpper($field.simpleType)}(COLUMN_NAME_${field.name.toUpperCase()}));
#end			
#end			
#foreach( $field in $entity.oneToOnes )

			// one-to-one ${field.name}:
			final ${field.entity.pk.simpleType} ${field.name}${helper.firstToUpper($field.entity.pk.name)} = rs.get${helper.firstToUpper($field.entity.pk.simpleType)}(COLUMN_NAME_${field.name.toUpperCase()});
			if (null != ${field.name}${helper.firstToUpper($field.entity.pk.name)}) {
    			final ${field.entity.simpleName} ${field.name} = new ${field.entity.simpleName}();
    			${field.name}.set${helper.firstToUpper($field.entity.pk.name)}(${field.name}${helper.firstToUpper($field.entity.pk.name)});
				entity.set${helper.firstToUpper($field.name)}(${field.name});
			}
#end
#foreach( $field in $entity.manyToOnes )

			// many-to-one ${field.name}:
			final ${field.entity.pk.simpleType} ${field.name}${helper.firstToUpper($field.entity.pk.name)} = rs.get${helper.firstToUpper($field.entity.pk.simpleType)}(COLUMN_NAME_${field.name.toUpperCase()});
			if (null != ${field.name}${helper.firstToUpper($field.entity.pk.name)}) {
    			final ${field.entity.simpleName} ${field.name} = new ${field.entity.simpleName}();
    			${field.name}.set${helper.firstToUpper($field.entity.pk.name)}(${field.name}${helper.firstToUpper($field.entity.pk.name)});
				entity.set${helper.firstToUpper($field.name)}(${field.name});
			}
#end

			return entity;			
		}
	};
	protected final ParameterizedRowMapper<${entity.simpleName}> getRowMapper() {
		return MAPPER;
	}
	
   // ------ AbstractSpringHelper overrides -----------------------------
   
	@Override
	public ${entity.simpleName} findBy(Map<String, Object> args) {
		// replace foreign entities with their primary keys:
#foreach( $field in $entity.oneToOnes )

		// ${field.name} (one-to-one)
		final Object ${field.name}Value = args.get(COLUMN_NAME_${field.name.toUpperCase()});
		if (null != ${field.name}Value && ${field.name}Value instanceof ${field.type}) {
			final ${field.type} entity = (${field.type}) ${field.name}Value;
			args.put(COLUMN_NAME_${field.name.toUpperCase()}, entity.get${helper.firstToUpper($field.entity.pk.name)}());
		}
#end
#foreach( $field in $entity.manyToOnes )

		// ${field.name} (many-to-one)
		final Object ${field.name}Value = args.get(COLUMN_NAME_${field.name.toUpperCase()});
		if (null != ${field.name}Value && ${field.name}Value instanceof ${field.type}) {
			final ${field.type} entity = (${field.type}) ${field.name}Value;
			args.put(COLUMN_NAME_${field.name.toUpperCase()}, entity.get${helper.firstToUpper($field.entity.pk.name)}());
		}
#end

		return super.findBy(args);
	}

   

   // ------ GenericDao implementation -----------------------------

	/**
	 * Inserts a ${entity.simpleName} instance. The primary key attribute of the instance is updated.
	 *
	 * @param entity the ${entity.simpleName} entity to insert
	 */
#if( "1.5" != $sourceVersion )
   @Override
#end
   public void persist(${entity.simpleName} entity) {
		LOGGER.debug("insert(" + entity + ")");
		
		// get id from next in sequence:
		final long id = incrementer.nextLongValue();
		entity.set${helper.firstToUpper(${entity.pk.name})}(id);
		
		HashMap<String,Object> parameters = new HashMap<String,Object>();
		parameters.put(getPrimaryKeyColumnName(), id);
		
		// properties
#foreach( $field in $entity.fields )
		parameters.put(COLUMN_NAME_${field.name.toUpperCase()}, entity.get${helper.firstToUpper($field.name)}());
#end

		// one-to-one keys:
#foreach( $field in $entity.oneToOnes )
		final ${field.type} ${field.name} = entity.get${helper.firstToUpper($field.name)}();
		if (null != ${field.name}) {
			parameters.put(COLUMN_NAME_${field.name.toUpperCase()}, toForeignKey(${field.name}.get${helper.firstToUpper($field.entity.pk.name)}()));
		}
#end

		// many-to-one keys:
#foreach( $field in $entity.manyToOnes )
		final ${field.type} ${field.name} = entity.get${helper.firstToUpper($field.name)}();
		if (null != ${field.name}) {
			parameters.put(COLUMN_NAME_${field.name.toUpperCase()}, toForeignKey(${field.name}.get${helper.firstToUpper($field.entity.pk.name)}()));
		}
#end

		insert.execute(parameters);
   }
   
	public ${entity.simpleName} persist(Map<String,Object> nameValuePairs) {
		if (!getColumnNames().containsAll(nameValuePairs.keySet()))
		{
			throw new IllegalArgumentException("No such column for persist.");
		}
		LOGGER.debug("insert(" + nameValuePairs + ")");
		final ${entity.simpleName} entity = new ${entity.simpleName}();
		
		// get id from next in sequence:
		final long id = incrementer.nextLongValue();
		entity.set${helper.firstToUpper(${entity.pk.name})}(id);
		nameValuePairs.put(getPrimaryKeyColumnName(), id);
		
		// properties
#foreach( $field in $entity.fields )
		entity.set${helper.firstToUpper($field.name)}((${field.type}) nameValuePairs.get(COLUMN_NAME_${field.name.toUpperCase()}));
#end

		// one-to-one keys:
#foreach( $field in $entity.oneToOnes )
		Object ${field.name}Value = nameValuePairs.get(COLUMN_NAME_${field.name.toUpperCase()});
		// replace entity with its primary key (in Map)
		if (${field.name}Value instanceof ${field.type}) {
			entity.set${helper.firstToUpper($field.name)}((${field.type}) ${field.name}Value);
			final ${field.type} ${field.name} = (${field.type}) ${field.name}Value;
			nameValuePairs.put(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name}.get${helper.firstToUpper($field.entity.pk.name)}());
		}
#end

		// many-to-one keys:
#foreach( $field in $entity.manyToOnes )
		Object ${field.name}Value = nameValuePairs.get(COLUMN_NAME_${field.name.toUpperCase()});
		// replace entity with its primary key (in Map)
		if (${field.name}Value instanceof ${field.type}) {
			entity.set${helper.firstToUpper($field.name)}((${field.type}) ${field.name}Value);
			final ${field.type} ${field.name} = (${field.type}) ${field.name}Value;
			nameValuePairs.put(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name}.get${helper.firstToUpper($field.entity.pk.name)}());
		}
#end

		insert.execute(nameValuePairs);
		return entity;
	}
   

	/** UPDATE SQL String for ${entity.simpleName} updates. */
	protected static final String SQL_UPDATE = "UPDATE " + TABLE_NAME + " SET " + 
    		// attributes first:
#foreach( $field in $entity.fields )
			COLUMN_NAME_${field.name.toUpperCase()} + " = ?#if( 0 < $entity.oneToOnes.size() || 0 < $entity.manyToOnes.size() || $velocityCount < $entity.fields.size() ), #end" + 
#end

			// then one-to-ones:
#foreach( $field in $entity.oneToOnes )
			COLUMN_NAME_${field.name.toUpperCase()} + " = ?#if( 0 < $entity.manyToOnes.size() || $velocityCount < $entity.oneToOnes.size() ), #end" + 
#end

			// then many-to-ones:
#foreach( $field in $entity.manyToOnes )
			COLUMN_NAME_${field.name.toUpperCase()} + " = ?#if( $velocityCount < $entity.manyToOnes.size() ), #end" + 
#end

			// finally, the primary key for WHERE clause:
			" WHERE " + COLUMN_NAME_${entity.pk.name.toUpperCase()} + " = ?";

	/**
	 * Updates a ${entity.simpleName} instance. 
	 * The primary key must not be changed.
	 *
	 * @param entity the instance to update
	 */
    public void update(final ${entity.simpleName} entity) {
		
		// prepare foreign keys:
#foreach( $field in $entity.oneToOnes )
		final ${field.type} ${field.name} = entity.get${helper.firstToUpper($field.name)}();
		Object _${field.name} = ${field.name};
		if (null != ${field.name}) {
			_${field.name} = ${field.name}.get${helper.firstToUpper($field.entity.pk.name)}();
		}
#end
#foreach( $field in $entity.manyToOnes )
		final ${field.type} ${field.name} = entity.get${helper.firstToUpper($field.name)}();
		Object _${field.name} = ${field.name};
		if (null != ${field.name}) {
			_${field.name} = ${field.name}.get${helper.firstToUpper($field.entity.pk.name)}();
		}
#end
		// attributes first:
		final Object args[] = {
#foreach( $field in $entity.fields )
			entity.get${helper.firstToUpper($field.name)}(), 
#end
			// then one-to-ones:
#foreach( $field in $entity.oneToOnes )
			_${field.name}, 
#end
			// then many-to-ones:
#foreach( $field in $entity.manyToOnes )
			_${field.name}, 
#end
			// finally, the primary key for WHERE clause:
			entity.get${helper.firstToUpper($entity.pk.name)}()};
		LOGGER.debug("update" + persistentClass.getSimpleName() + "(" + Arrays.toString(args) + ")");
		template.update(SQL_UPDATE, args);
	}
	
   public void delete(${entity.simpleName} entity) {
		LOGGER.debug("delete(" + entity + ")");
		
		final String sql = "DELETE FROM " + TABLE_NAME + " WHERE " + COLUMN_NAME_${entity.pk.name.toUpperCase()} + " = ?";
		int affected = template.update(sql, entity.get${helper.firstToUpper($field.name)}());
		if (0 == affected)
		{
			throw new EmptyResultDataAccessException("No such " + getTableName() + " for id " + entity.get${helper.firstToUpper($field.name)}(), 1);
		}
   }

}
