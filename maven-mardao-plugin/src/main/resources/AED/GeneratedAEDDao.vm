package ${daoPackage};

import java.util.Arrays;
import java.util.List;

import com.google.appengine.api.datastore.Key;

import net.sf.mardao.api.dao.Dao;

import ${entity.className};

/**
 * DAO interface with finder methods for ${entity.simpleName} entities.
 *
 * Generated on ${currentDate}.
 * @author mardao DAO generator (${helper.class.name})
 */
public interface Generated${entity.simpleName}Dao extends Dao<${entity.simpleName}, ${entity.pk.type}, Key, Key> {

	/** Column name for primary key attribute is "${entity.pk.columnName}" */
	static final String COLUMN_NAME_${entity.pk.name.toUpperCase()} = "${entity.pk.columnName}";

#set( $allFields = $entity.allFields )
#foreach( $field in $allFields )
	/** Column name for attribute ${field.name} is "${field.columnName}" */
	static final String COLUMN_NAME_${field.name.toUpperCase()} = "${field.columnName}";
#end

	/** The list of attribute names */
	static final List<String> COLUMN_NAMES = Arrays.asList(
		COLUMN_NAME_${entity.pk.name.toUpperCase()}#foreach( $field in $allFields ), 
		COLUMN_NAME_${field.name.toUpperCase()}#end);


#if( $entity.parent )
#set( $field = $entity.parent )
	// ----------------------- parent finder -------------------------------
	/**
	 * find-by method for parent field ${field.name}
	 * @param ${field.name} the specified attribute
	 * @return a List of ${entity.simpleName}s with the specified parent
	 */
	List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name});
		
    List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}(Object ${field.name});		
   
	List<${entity.pk.type}> findKeysBy${helper.firstToUpper($field.name)}(${field.type} ${field.name});

#end   
	// ----------------------- field finders -------------------------------
#foreach( $field in $entity.fields )
#if( $entity.isUnique($field.name) )
	/**
	 * find-by method for unique attribute field ${field.name}
	 * @param ${field.name} the unique attribute
	 * @return the unique ${entity.simpleName} for the specified attribute
	 */
	${entity.simpleName} findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name});
#else
	/**
	 * find-by method for attribute field ${field.name}
	 * @param ${field.name} the specified attribute
	 * @return a List of ${entity.simpleName}s with the specified attribute
	 */
	List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name});
	
	/**
	 * find-primary-key-by method for attribute field ${field.name}
	 * @param ${field.name} the specified attribute
	 * @return a List of keys to the ${entity.simpleName}s with the specified attribute
	 */
	List<${entity.pk.type}> findKeysBy${helper.firstToUpper($field.name)}(${field.type} ${field.name});
#end	

#end	
		  
	// ----------------------- one-to-one finders -------------------------
#foreach( $field in $entity.oneToOnes )
#set( $foreign = $entities.get($field.type))
	/**
	 * find-by method for one-to-one field ${field.name}
	 * @param ${field.name} the related ${field.type} entity
	 * @return the ${entity.simpleName} belonging to the one-to-one relation
	 */
	${entity.simpleName} findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name});
	
#if( $foreign )  
	/**
	 * find-by method for one-to-one field ${field.name}
	 * @param ${foreign.pk.name} the related ${field.type} entity's primary key
	 * @return the ${entity.simpleName} belonging to the one-to-one relation
	 */
	${entity.simpleName} findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${foreign.pk.type} ${foreign.pk.name});
#end	
	
#end	

	// ----------------------- many-to-one finders -------------------------
#foreach( $field in $entity.manyToOnes )
#set( $foreign = $entities.get($field.type)) 
	/**
	 * find-by method for many-to-one field ${field.name}
	 * @param ${field.name} the related ${field.type} entity
	 * @return a List of ${entity.simpleName}s belonging to the many-to-one relation
	 */
	List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name});

#if( $foreign )	
	/**
	 * find-by method for many-to-one field ${field.name}
	 * @param ${foreign.pk.name} the related ${field.type} entity's primary key
	 * @return a List of ${entity.simpleName}s belonging to the many-to-one relation
	 */
	List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${foreign.pk.type} ${foreign.pk.name});
#end	
	
#end	
	
	// ----------------------- many-to-many finders -------------------------
#foreach( $field in $entity.manyToManys )
#set( $foreign = $entities.get($field.type))
	/**
	 * find-by method for many-to-many field ${field.name}
	 * @param ${field.name} the related ${field.type} entity
	 * @return a List of ${entity.simpleName}s belonging to the many-to-many relation
	 */
	List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name});
	
#if( $foreign )  
	/**
	 * find-by method for many-to-many field ${field.name}
	 * @param ${foreign.pk.type} the related ${field.type} entity's primary key
	 * @return a List of ${entity.simpleName}s belonging to the many-to-many relation
	 */
	List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${foreign.pk.type} ${foreign.pk.name});
#end	
	
#end	

	// ----------------------- uniqueFields finders -------------------------
	
#foreach( $uniqueFields in $entity.uniqueFieldsSets )
	/**
	 * find-by method for unique fields
#foreach( $field in $uniqueFields )	 
	 * @param ${field.name} the specified ${field.name}
#end	 
	 * @return the unique ${entity.simpleName} for the specified fields
	 */
	${entity.simpleName} findBy#foreach( $field in $uniqueFields )
${helper.firstToUpper($field.name)}#end(#foreach( $field in $uniqueFields )
${field.type} ${field.name}#if( $velocityCount < $uniqueFields.size() ), #end
#end);

#end
	
	// ----------------------- populate / persist method -------------------------

	/**
	 * Persist an entity given all attributes
	 */
	${entity.simpleName} persist(#if( $entity.parent )
Key ${entity.parent.name},  	
#end		${entity.pk.type} ${entity.pk.name}#foreach( $field in $entity.fields )
, 
		${field.type} ${field.name}#end
#foreach( $field in $entity.oneToOnes )	 
, 
		${field.type} ${field.name}#end
#foreach( $field in $entity.manyToOnes )	 
, 
		${field.type} ${field.name}#end);	

#if( $persistenceType != "JPA" )
#if( $entity.firstUniqueField )
#set( $uniqueField = $entity.firstUniqueField )
	/**
	 * Persists an entity unless it already exists
	 */
	 ${entity.simpleName} persist(#foreach( $field in $entity.fields )
${field.simpleType} ${field.name}#if( 0 < $entity.oneToOnes.size() || 0 < $entity.manyToOnes.size() || $velocityCount < $entity.fields.size() ), #end
#end
#foreach( $field in $entity.oneToOnes )	 
${field.type} ${field.name}#if( 0 < $entity.manyToOnes.size() || $velocityCount < $entity.manyToOnes.size() ), #end
#end
#foreach( $field in $entity.manyToOnes )	 
${field.type} ${field.name}#if( $velocityCount < $entity.manyToOnes.size() ), #end
#end);

#end
#end
}
