package ${daoBasePackage};

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

import net.sf.mardao.api.dao.AndroidDaoImpl;
import net.sf.mardao.api.dao.AndroidEntity;
import net.sf.mardao.api.dao.CursorIterable;

import ${entity.className};
#foreach( $field in $entity.oneToOnes )
import ${field.entity.className};
#end
#foreach( $field in $entity.manyToOnes )
import ${field.entity.className};
#end

/**
 * Concrete class without generics, for Spring container instatiation.
 */
public class Generated${entity.simpleName}DaoImpl extends AndroidDaoImpl<${entity.simpleName}> 
	implements Generated${entity.simpleName}Dao<Long, Long> {

	/** Table name for ${entity.simpleName} is "${entity.tableName}" */
	public static final String TABLE_NAME = "${entity.tableName}";

#foreach( $field in $entity.manyToOnes )
    /** DAO for Many-To-One relation ${field.name} */
    private Generated${field.entity.simpleName}DaoImpl ${field.name}Dao;
	/** Setter for Many-To-One ${field.name} DAO */
	public void set${helper.firstToUpper($field.name)}Dao(Generated${field.entity.simpleName}DaoImpl dao) {
		${field.name}Dao = dao;
	}
#end
	
	
	/** Constructor */
   public Generated${entity.simpleName}DaoImpl(SQLiteDatabase database) {
      super(${entity.simpleName}.class, database);
   }
   
   public String getTableName() {
   		return TABLE_NAME;
   }
   
   public String getPrimaryKeyColumnName() {
   		return COLUMN_NAME_${entity.pk.name.toUpperCase()};
   }
   
   public List<String> getColumnNames() {
        return COLUMN_NAMES;
   }

    /**
     * Override this to get custom create statement
     */
    protected static String getCreateDbSql() {
        return "CREATE TABLE " + TABLE_NAME + " (" +
	"${entity.pk.columnName} INTEGER PRIMARY KEY AUTOINCREMENT" +
#foreach( $column in $entity.fields )
	", ${column.columnName} $dbTypes.get($column.type)" +
#end
#foreach( $column in $entity.oneToOnes )
	", ${column.columnName} $dbTypes.get($column.entity.pk.type) NOT NULL" +
#end
#foreach( $column in $entity.manyToOnes )
	", ${column.columnName} $dbTypes.get($column.entity.pk.type) DEFAULT NULL" +
#end
#foreach( $columnSet in $entity.uniqueConstraints )
	", UNIQUE (#foreach( $column in $columnSet )${column}#if( $velocityCount < $columnSet.size() ), #end#end)" +
#end
#foreach( $column in $entity.oneToOnes )
	", CONSTRAINT `Fk${entity.simpleName}${helper.firstToUpper($column.name)}` FOREIGN KEY (`${column.columnName}`) REFERENCES `${column.entity.tableName}` (`${column.entity.pk.columnName}`)" +
#end
#foreach( $column in $entity.manyToOnes )
	", CONSTRAINT `Fk${entity.simpleName}${helper.firstToUpper($column.name)}` FOREIGN KEY (`${column.columnName}`) REFERENCES `${column.entity.tableName}` (`${column.entity.pk.columnName}`)" +
#end
        ");";
    }
   
    public static void onCreate(SQLiteDatabase db) {
        final String sql = getCreateDbSql();
        Log.i(TABLE_NAME, "Creating Table: " + sql);
        db.execSQL(sql);
    }

	
   // ------ DaoImpl overrides -----------------------------

   protected ${entity.simpleName} createDomain(AndroidEntity entity) {
        // do null-check here only :-)
        if (null == entity)  {
        	return null;
        }
        
        final ${entity.simpleName} domain = new ${entity.simpleName}();
        domain.set${helper.firstToUpper(${entity.pk.name})}((Long)entity.getProperty(getPrimaryKeyColumnName()));
#if( $entity.parent )
		// parent
		domain.set${helper.firstToUpper(${entity.parent.name})}(entity.getParent());
#end
	    // createdDate, updatedDate
		convertCreatedUpdatedDates(entity, domain);
		
		// properties
#foreach( $field in $entity.fields )
		domain.set${helper.firstToUpper($field.name)}(($field.type) entity.getProperty(COLUMN_NAME_${field.name.toUpperCase()}));
#end

		// one-to-one keys:
#foreach( $field in $entity.oneToOnes )
		domain.set${helper.firstToUpper($field.name)}(($field.type) entity.getProperty(COLUMN_NAME_${field.name.toUpperCase()}));
#end

		// many-to-one keys:
#foreach( $field in $entity.manyToOnes )
        // ${field.name}
        final Key ${field.name}Key = (Key) entity.getProperty(COLUMN_NAME_${field.name.toUpperCase()});
        if (null != ${field.name}Key) {
            final Entity ${field.name}Entity = new Entity(${field.name}Key);
            domain.set${helper.firstToUpper($field.name)}(${field.name}Dao.convert(${field.name}Entity));
        }
#end

		return domain;
   }
   
   protected ${entity.simpleName} createDomain(Cursor cursor) {
        // do null-check here only :-)
        if (null == cursor)  {
        	return null;
        }
        
        final ${entity.simpleName} domain = new ${entity.simpleName}();
        int i = 0;
        domain.set${helper.firstToUpper(${entity.pk.name})}(cursor.getLong(i++));
#if( $entity.parent )
		// parent
		domain.set${helper.firstToUpper(${entity.parent.name})}(entity.getParent());
#end
	    // createdDate, updatedDate
		// convertCreatedUpdatedDates(entity, domain);
		
		// properties
#foreach( $field in $entity.fields )
#if( $field.type == "java.lang.String" )
		domain.set${helper.firstToUpper($field.name)}(cursor.getString(i++));
#elseif( $field.type == "java.lang.Long" ) 
		domain.set${helper.firstToUpper($field.name)}(cursor.getLong(i++));
#elseif( $field.type == "java.util.Date" ) 
		domain.set${helper.firstToUpper($field.name)}(new Date(cursor.getLong(i++)));
#end
#end

		// one-to-one keys:
#foreach( $field in $entity.oneToOnes )
		domain.set${helper.firstToUpper($field.name)}(($field.type) entity.getProperty(COLUMN_NAME_${field.name.toUpperCase()}));
#end

		// many-to-one keys:
#foreach( $field in $entity.manyToOnes )
        // ${field.name}
        final Key ${field.name}Key = (Key) entity.getProperty(COLUMN_NAME_${field.name.toUpperCase()});
        if (null != ${field.name}Key) {
            final Entity ${field.name}Entity = new Entity(${field.name}Key);
            domain.set${helper.firstToUpper($field.name)}(${field.name}Dao.convert(${field.name}Entity));
        }
#end

		return domain;
   }
   
   protected AndroidEntity createEntity(${entity.simpleName} domain) {
        final AndroidEntity entity = domain._createEntity();

		// properties
#foreach( $field in $entity.fields )
		populate(entity, COLUMN_NAME_${field.name.toUpperCase()}, domain.get${helper.firstToUpper($field.name)}());
#end

		// one-to-one keys:
#foreach( $field in $entity.oneToOnes )
		populate(entity, COLUMN_NAME_${field.name.toUpperCase()}, domain.get${helper.firstToUpper($field.name)}());
#end

		// many-to-one keys:
#foreach( $field in $entity.manyToOnes )
		final ${field.type} ${field.name} = domain.get${helper.firstToUpper($field.name)}();
		if (null != ${field.name}) {
			populate(entity, COLUMN_NAME_${field.name.toUpperCase()}, ${field.name}.getPrimaryKey());
		}
#end

	return entity;
   }

   protected void populate(AndroidEntity entity, Map<String, Object> nameValuePairs) {
		// properties
#foreach( $field in $entity.fields )
		populate(entity, COLUMN_NAME_${field.name.toUpperCase()}, nameValuePairs.get(COLUMN_NAME_${field.name.toUpperCase()}));
#end

		// one-to-one keys:
#foreach( $field in $entity.oneToOnes )
		populate(entity, COLUMN_NAME_${field.name.toUpperCase()}, nameValuePairs.get(COLUMN_NAME_${field.name.toUpperCase()}));
#end

		// many-to-one keys:
#foreach( $field in $entity.manyToOnes )
		populate(entity, COLUMN_NAME_${field.name.toUpperCase()}, nameValuePairs.get(COLUMN_NAME_${field.name.toUpperCase()}));
#end

   }
   
#if( $entity.parent )
#set( $field = $entity.parent )
/*
	@Override
    protected final void persistUpdateKeys(${entity.simpleName} domain, Key key) {
#if( ${entity.pk.type} == "java.lang.String" )
		domain.set${helper.firstToUpper($field.name)}(key.getParent());
		domain.set${helper.firstToUpper($entity.pk.name)}(key.getName());
#elseif( ${entity.pk.type} == "java.lang.Long" )
		domain.set${helper.firstToUpper($field.name)}(key.getParent());
		domain.set${helper.firstToUpper($entity.pk.name)}(key.getId());
#else
		<!-- Unsupported primary key type for children: ${entity.pk.type} -->
#end
	}
*/
	
	// ----------------------- parent finders -------------------------------
	/**
	 * find-by method for parent field ${field.name}
	 * @param ${field.name} the specified attribute
	 * @return a List of ${entity.simpleName}s with the specified parent
	 */
	public final List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
	    return findByParent(${field.name});
	}

	public final List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}(Object ${field.name}) {
		return findByParent((${field.type}) ${field.name});
	}
	
	/**
	 * find-by method for parent field ${field.name}
	 * @param ${field.name} the specified attribute
	 * @return a List of ${entity.simpleName}s with the specified parent
	 */
	public final List<${entity.pk.type}> findKeysBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
		return findKeysByParent(${field.name});
	}
#else

	@Override
    protected final void persistUpdateKeys(${entity.simpleName} domain, Long key) {
		domain.set${helper.firstToUpper($entity.pk.name)}(key);
	}
	
#end

	// ----------------------- field finders -------------------------------
#foreach( $field in $entity.fields )

#if( $entity.isUnique($field.name) )
	/**
	 * find-by method for unique attribute field ${field.name}
	 * @param ${field.name} the unique attribute
	 * @return the unique ${entity.simpleName} for the specified attribute
	 */
	public final ${entity.simpleName} findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
		return findUniqueBy(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name});
	}

        // no queryBy${helper.firstToUpper($field.name)} method, as ${field.name} is unique
#else
	/**
	 * find-by method for attribute field ${field.name}
	 * @param ${field.name} the specified attribute
	 * @return a List of ${entity.simpleName}s with the specified attribute
	 */
	public final List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
		return findBy(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name});
	}
	
	/**
	 * find-primary-key-by method for attribute field ${field.name}
	 * @param ${field.name} the specified attribute
	 * @return a List of keys to the ${entity.simpleName}s with the specified attribute
	 */
	public final List<${entity.pk.type}> findKeysBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
		return findKeysBy(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name});
	}

	/**
	 * query-by method for attribute field ${field.name}
	 * @param ${field.name} the specified attribute
	 * @return a CursorIterable of ${entity.simpleName}s with the specified attribute
	 */
	public final CursorIterable<${entity.simpleName}> queryBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
		return queryBy(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name});
	}
	
	/**
	 * query-primary-key-by method for attribute field ${field.name}
	 * @param ${field.name} the specified attribute
	 * @return a Cursor of keys to the ${entity.simpleName}s with the specified attribute
	 */
	public final Cursor queryKeysBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
		return queryKeysBy(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name});
	}
#end	
#end	
		  
	// ----------------------- one-to-one finders -------------------------
#foreach( $field in $entity.oneToOnes )
#set( $foreign = $entities.get($field.type))
	/**
	 * find-by method for one-to-one field ${field.name}
	 * @param ${field.name} the related ${field.type} entity
	 * @return the ${entity.simpleName} belonging to the one-to-one relation
	 */
	public final ${entity.simpleName} findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
		return findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${field.name}.get${helper.firstToUpper($field.entity.pk.name)}());
	}
	
#if( $foreign )  
	/**
	 * find-by method for one-to-one field ${field.name}
	 * @param ${foreign.pk.name} the related ${field.type} entity's primary key
	 * @return the ${entity.simpleName} belonging to the one-to-one relation
	 */
	public final ${entity.simpleName} findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${foreign.pk.type} ${foreign.pk.name}) {
		return findUniqueBy(COLUMN_NAME_${field.name.toUpperCase()}, ${foreign.pk.name});
	}	
#end	
	
#end	

	// ----------------------- many-to-one finders -------------------------
#foreach( $field in $entity.manyToOnes )
#set( $foreign = $entities.get($field.type))
	/**
	 * find-by method for many-to-one field ${field.name}
	 * @param ${field.name} the related ${field.type} entity
	 * @return a List of ${entity.simpleName}s belonging to the many-to-one relation
	 */
	public final List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
		return findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${field.name}.get${helper.firstToUpper($field.entity.pk.name)}());
	}
	
#if( $foreign )  
	/**
	 * find-by method for many-to-one field ${field.name}
	 * @param ${foreign.pk.name} the related ${field.type} entity's primary key
	 * @return a List of ${entity.simpleName}s belonging to the many-to-one relation
	 */
	public final List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}Key(Key ${field.name}Key) {
		return findBy(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name}Key);
	}	

	/**
	 * find-by method for many-to-one field ${field.name}
	 * @param ${foreign.pk.name} the related ${field.type} entity's primary key
	 * @return a List of ${entity.simpleName}s belonging to the many-to-one relation
	 */
	public final List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${foreign.pk.type} ${foreign.pk.name}) {
		return findByKey(COLUMN_NAME_${field.name.toUpperCase()}, ${field.type}.class, ${foreign.pk.name});
	}	
#end	
	
#end	

	// ----------------------- many-to-many finders -------------------------
#foreach( $field in $entity.manyToManys )
#if( $entities.get($field.type) )  
#set( $foreign = $entities.get($field.type))
	/**
	 * find-by method for many-to-many field ${field.name}
	 * @param ${field.name} the related ${field.type} entity
	 * @return a List of ${entity.simpleName}s belonging to the many-to-many relation
	 */
	public final List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
#if( $persistenceType == "JPA" )
      return findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${field.name}.get${helper.firstToUpper($foreign.pk.name)}());
#else
		return findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${field.name}.get${helper.firstToUpper($foreign.pk.name)}());
#end
	}
	
	/**
	 * find-by method for many-to-many field ${field.name}
	 * @param ${foreign.pk.type} the related ${field.type} entity's primary key
	 * @return a List of ${entity.simpleName}s belonging to the many-to-many relation
	 */
	public final List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${foreign.pk.type} ${foreign.pk.name}) {
#if( $persistenceType == "JPA" )

      return findByManyToMany("${entity.pk.name}",
                                         "${field.name}_${foreign.pk.name}",
                                         "${field.simpleType}",
                                         "${field.mappedBy}_${entity.pk.name}",
                                         ${foreign.pk.name});
#else
		// FIXME: implement properly
		return findByManyToMany("${entity.pk.name}", // primaryKeyName
#if( $field.mappedBy )		 
			"${field.mappedBy}_${entity.pk.name}", // this side's column in the join table (mappedBy="${field.mappedBy}")
#else
#set( $relatedField = $foreign.mappedBy.get($field.name) )
			"${helper.firstToLower($relatedField.name)}_${entity.pk.name}", // this side's column in the join table  
#end
			"${field.simpleType}", // related entity class simple name
			"${field.name}_${foreign.pk.name}", // the related side's column in the join table
			${foreign.pk.name}); 			 
#end
	}
#end	
	
#end

	// ----------------------- uniqueFields finders -------------------------
#foreach( $uniqueFields in $entity.uniqueFieldsSets )
	/**
	 * find-by method for unique attributes
#foreach( $field in $uniqueFields )	 
	 * @param ${field.name} the specified ${field.name}
#end	 
	 * @return the unique ${entity.simpleName} for the specified fields
	 */
	public final ${entity.simpleName} findBy#foreach( $field in $uniqueFields )
${helper.firstToUpper($field.name)}#end(#foreach( $field in $uniqueFields )
${field.type} ${field.name}#if( $velocityCount < $uniqueFields.size() ), #end
#end) {
		final java.util.Map<String,Object> args = new java.util.HashMap<String,Object>($uniqueFields.size());
#foreach( $field in $uniqueFields )
		args.put(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name});
#end
		return findBy(args);
	}
#end

	// ----------------------- populate / persist method -------------------------

	/**
	 * Persist an entity given all attributes
	 */
	public ${entity.simpleName} persist(#if( $entity.parent )
Key ${entity.parent.name},  	
#end		${entity.pk.type} ${entity.pk.name}#foreach( $field in $entity.fields )
, 
		${field.type} ${field.name}#end
#foreach( $field in $entity.oneToOnes )	 
, 
		${field.type} ${field.name}#end
#foreach( $field in $entity.manyToOnes )	 
, 
		${field.type} ${field.name}#end) {
		${entity.simpleName} domain = null;
		// if primaryKey specified, use it
		if (null != ${entity.pk.name}) {
			domain = findByPrimaryKey(#if( $entity.parent )
${entity.parent.name}, #end${entity.pk.name});
		}
		
#if( 0 < $entity.uniqueFieldsSets.size() )
#set( $uniqueFields = $entity.uniqueFieldsSets.get(0) )
		// use find-by unique column set
		if (null == domain) {
			final java.util.Map<String,Object> args = new java.util.HashMap<String,Object>($uniqueFields.size());
#foreach( $field in $uniqueFields )
			args.put(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name});
#end
			domain = findBy(args);
		}
#end		
		// create new?
		if (null == domain) {
			domain = new ${entity.simpleName}();
#if( $entity.parent )
			// set parent
			domain.set${helper.firstToUpper($entity.parent.name)}((${entity.parent.type}) ${entity.parent.name});
#end			
			// generate Id?
			if (null != ${entity.pk.name}) {
				domain.set${helper.firstToUpper($entity.pk.name)}(${entity.pk.name});
			}
			// fields
#foreach( $field in $entity.fields )
			domain.set${helper.firstToUpper($field.name)}(${field.name});
#end
			// one-to-ones
#foreach( $field in $entity.oneToOnes )	 
			domain.set${helper.firstToUpper($field.name)}(${field.name});
#end
			// many-to-ones
#foreach( $field in $entity.manyToOnes )	 
			domain.set${helper.firstToUpper($field.name)}(${field.name});
#end
			
			persist(domain);
		}
		return domain;
	}


#if( $persistenceType != "JPA" )
#if( $entity.firstUniqueField )
#set( $uniqueField = $entity.firstUniqueField )
	/**
	 * Persists an entity unless it already exists
	 */
	public ${entity.simpleName} persist(#foreach( $field in $entity.fields )
${field.simpleType} ${field.name}#if( 0 < $entity.oneToOnes.size() || 0 < $entity.manyToOnes.size() || $velocityCount < $entity.fields.size() ), #end
#end
#foreach( $field in $entity.oneToOnes )	 
${field.type} ${field.name}#if( 0 < $entity.manyToOnes.size() || $velocityCount < $entity.manyToOnes.size() ), #end
#end
#foreach( $field in $entity.manyToOnes )	 
${field.type} ${field.name}#if( $velocityCount < $entity.manyToOnes.size() ), #end
#end) {
		${entity.simpleName} domain = findBy${helper.firstToUpper($uniqueField.name)}(${uniqueField.name});
		if (null == domain) {
			domain = new ${entity.simpleName}();
#foreach( $field in $entity.fields )
			domain.set${helper.firstToUpper($field.name)}(${field.name});
#end
#foreach( $field in $entity.oneToOnes )	 
			domain.set${helper.firstToUpper($field.name)}(${field.name});
#end
#foreach( $field in $entity.manyToOnes )	 
			domain.set${helper.firstToUpper($field.name)}(${field.name});
#end
			persist(domain);
		}
		return domain;
	}

#end
#end

	
}
