package ${daoBasePackage};

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import net.sf.mardao.api.CursorPage;
import net.sf.mardao.api.Filter;
import net.sf.mardao.api.dao.TypeDaoImpl;
import ${entity.className};
#foreach( $field in $entity.oneToOnes )
import ${field.entity.className};
#end
#foreach( $field in $entity.manyToOnes )
import ${field.entity.className};
#end
#foreach( $field in $entity.manyToManys )	 
import ${field.entity.className};
#end
import net.sf.mardao.api.domain.PrimaryKeyEntity;

/**
 * The ${entity.simpleName} domain-object specific finders and methods go in this POJO.
 * 
 * Generated on ${currentDate}.
 * @author mardao DAO generator (${helper.class.name})
 */
public class Generated${entity.simpleName}DaoImpl extends TypeDaoImpl<${entity.simpleName}, ${entity.pk.type}> 
	implements Generated${entity.simpleName}Dao {

#foreach( $field in $entity.manyToOnes )
    /** DAO for Many-To-One relation ${field.name} */
    private Generated${field.entity.simpleName}DaoImpl ${field.name}Dao;
    /** Setter for Many-To-One ${field.name} DAO */
    public void set${helper.firstToUpper($field.name)}Dao(Generated${field.entity.simpleName}DaoImpl dao) {
        ${field.name}Dao = dao;
    }
#end
	
    /** Default constructor */
   public Generated${entity.simpleName}DaoImpl() {
      super(${entity.simpleName}.class);
   }

   // ------ BEGIN DaoImpl overrides -----------------------------
   
   public String getPrimaryKeyColumnName() {
   		return COLUMN_NAME_${entity.pk.name.toUpperCase()};
   }
   
   public List<String> getColumnNames() {
        return COLUMN_NAMES;
   }

#foreach( $field in $entity.fields )
#if( $field.type == "net.sf.mardao.api.geo.DLocation" )
    @Override
    protected String getLocationColumnName() {
        return COLUMN_NAME_${field.nameUpper};
    }

#end
#end
    @Override
    protected Object getDomainProperty(${entity.simpleName} domain, String name) {
        Object value;
#set( $field = $entity.pk )
        // simple key?
        if (COLUMN_NAME_${field.nameUpper}.equals(name)) {
            value = domain.get${field.nameFirst}();
        }
#if( $entity.parent )
#set( $field = $entity.parent )
        // parent key?
        else if (COLUMN_NAME_${field.nameUpper}.equals(name)) {
            value = domain.get${field.nameFirst}();
        }
#end			
        // fields
#foreach( $field in $entity.fields )
        else if (COLUMN_NAME_${field.nameUpper}.equals(name)) {
            value = domain.get${field.nameFirst}();
        }
#end
        // one-to-ones
#foreach( $field in $entity.oneToOnes )	 
        else if (COLUMN_NAME_${field.nameUpper}.equals(name)) {
            value = domain.get${field.nameFirst}();
        }
#end
        // many-to-ones
#foreach( $field in $entity.manyToOnes )	 
        else if (COLUMN_NAME_${field.nameUpper}.equals(name)) {
            final PrimaryKeyEntity foreign = domain.get${field.nameFirst}();
            value = null != foreign ? foreign.getSimpleKey() : null;
        }
#end
        // many-to-manys
#foreach( $field in $entity.manyToManys )	 
        else if (COLUMN_NAME_${field.nameUpper}.equals(name)) {
            Collection<Object> ids = null;
            final Collection<${field.entity.simpleName}> foreigns = domain.get${field.nameFirst}();
            if (null != foreigns) {
                ids = new ArrayList<Object>();
                for (${field.entity.simpleName} f : foreigns) {
                    ids.add(f.getSimpleKey());
                }
            }
            value = ids;
        }
#end
        else {
            value = super.getDomainProperty(domain, name);
        }

        return value;
    }
      
    @Override
    protected void setDomainProperty(final ${entity.simpleName} domain, final String name, final Object value) {
#set( $field = $entity.pk )
        // simple key?
        if (COLUMN_NAME_${field.nameUpper}.equals(name)) {
            domain.set${field.nameFirst}((${field.type}) value);
        }
#if( $entity.parent )
#set( $field = $entity.parent )
        // parent key?
        else if (COLUMN_NAME_${field.nameUpper}.equals(name)) {
            domain.set${field.nameFirst}((${field.type}) value);
        }
#end			
        // fields
#foreach( $field in $entity.fields )
        else if (COLUMN_NAME_${field.nameUpper}.equals(name)) {
            domain.set${field.nameFirst}((${field.type}) value);
        }
#end
        // one-to-ones
#foreach( $field in $entity.oneToOnes )	 
        else if (COLUMN_NAME_${field.nameUpper}.equals(name)) {
            domain.set${field.nameFirst}((${field.type}) value);
        }
#end
        // many-to-ones
#foreach( $field in $entity.manyToOnes )	 
        else if (COLUMN_NAME_${field.nameUpper}.equals(name)) {
            ${field.entity.simpleName} foreign = null;
            if (null != value) {
                foreign = new ${field.entity.simpleName}();
                foreign.setSimpleKey((${field.entity.pk.type}) value);
            }
            domain.set${field.nameFirst}(foreign);
        }
#end
        // many-to-manys
#foreach( $field in $entity.manyToManys )	 
        else if (COLUMN_NAME_${field.nameUpper}.equals(name)) {
            final Collection<${field.entity.simpleName}> foreigns = new ArrayList<${field.entity.simpleName}>();
            if (null != value) {
                ${field.entity.simpleName} foreign;
                Collection<${field.entity.pk.type}> ids = (Collection<${field.entity.pk.type}>) value;
                for (${field.entity.pk.type} id : ids) {
                    foreign = new ${field.entity.simpleName}();
                    foreign.setSimpleKey(id);
                    foreigns.add(foreign);
                }
            }
            domain.set${field.nameFirst}(foreigns);
        }
#end
        else {
            super.setDomainProperty(domain, name, value);
        }
    }

#if( $entity.parent )
#set( $field = $entity.parent )
    /** Default implementation returns null, overrides for ${field.name} parent */
    public String getParentKeyColumnName() {
        return COLUMN_NAME_${field.nameUpper};
    }
    
   // ------ END DaoImpl overrides -----------------------------

	// ----------------------- parent finders -------------------------------

	/**
	 * query-by method for parent field ${field.name}
	 * @param ${field.name} the specified attribute
	 * @return an Iterable of ${entity.simpleName}s for the specified parent
	 */
	public final Iterable<${entity.simpleName}> queryBy${helper.firstToUpper($field.name)}(Object ${field.name}) {
            final Filter filter = createEqualsFilter(getParentKeyColumnName(), ${field.name});
            return queryIterable(false, 0, -1, null, null, null, false, null, false, filter);
	}
	
	/**
	 * query-key-by method for parent field ${field.name}
	 * @param ${field.name} the parent
	 * @return an Iterable of keys to the ${entity.simpleName}s with the specified parent
	 */
	public final Iterable<${entity.pk.type}> queryKeysBy${helper.firstToUpper($field.name)}(Object ${field.name}) {
            final Filter filter = createEqualsFilter(getParentKeyColumnName(), ${field.name});
            return queryIterableKeys(0, -1, null, null, null, false, null, false, filter);
	}

	/**
	 * query-page-by method for parent field ${field.name}
	 * @param ${field.name} the specified parent
         * @param pageSize the number of domain entities in the page
         * @param cursorString non-null if get next page
	 * @return a Page of ${entity.simpleName}s for the specified ${field.name}
	 */
	public final CursorPage<${entity.simpleName}, ${entity.pk.type}> queryPageBy${helper.firstToUpper($field.name)}(${field.type} ${field.name},
            int pageSize, Serializable cursorString) {
            final Filter filter = createEqualsFilter(getParentKeyColumnName(), ${field.name});
            return queryPage(false, pageSize, null, null, null, false, null, false, cursorString, filter);
        }

#else
   // ------ END DaoImpl overrides -----------------------------

        // ${entity.simpleName} has no parent
#end

	// ----------------------- field finders -------------------------------
#foreach( $field in $entity.fields )
#if( $entity.isUnique($field.name) )
	/**
	 * find-by method for unique attribute field ${field.name}
	 * @param ${field.name} the unique attribute
	 * @return the unique ${entity.simpleName} for the specified attribute
	 */
	public final ${entity.simpleName} findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
                Filter filter = createEqualsFilter(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name});
		return findUniqueBy(filter);
	}
#else
	/**
	 * query-by method for attribute field ${field.name}
	 * @param ${field.name} the specified attribute
	 * @return an Iterable of ${entity.simpleName}s with the specified attribute
	 */
	public final Iterable<${entity.simpleName}> queryBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
            final Filter filter = createEqualsFilter(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name});
            return queryIterable(false, 0, -1, null, null, null, false, null, false, filter);
	}
	
	/**
	 * query-key-by method for attribute field ${field.name}
	 * @param ${field.name} the specified attribute
	 * @return an Iterable of keys to the ${entity.simpleName}s with the specified attribute
	 */
	public final Iterable<${entity.pk.type}> queryKeysBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
            final Filter filter = createEqualsFilter(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name});
            return queryIterableKeys(0, -1, null, null, null, false, null, false, filter);
	}

	/**
	 * query-page-by method for field ${field.name}
	 * @param ${field.name} the specified attribute
         * @param pageSize the number of domain entities in the page
         * @param cursorString non-null if get next page
	 * @return a Page of ${entity.simpleName}s for the specified ${field.name}
	 */
	public final CursorPage<${entity.simpleName}, ${entity.pk.type}> queryPageBy${helper.firstToUpper($field.name)}(${field.type} ${field.name},
            int pageSize, Serializable cursorString) {
            final Filter filter = createEqualsFilter(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name});
            return queryPage(false, pageSize, null, null, null, false, null, false, cursorString, filter);
        }

#end	
	 
#end	
	// ----------------------- one-to-one finders -------------------------
#foreach( $field in $entity.oneToOnes )
#set( $foreign = $entities.get($field.type))
	/**
	 * find-by method for one-to-one field ${field.name}
	 * @param ${field.name} the related ${field.type} entity
	 * @return the ${entity.simpleName} belonging to the one-to-one relation
	 */
	public final ${entity.simpleName} findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
		return findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${field.name}.get${helper.firstToUpper($field.entity.pk.name)}());
	}
	
#if( $foreign )  
	/**
	 * find-by method for one-to-one field ${field.name}
	 * @param ${foreign.pk.name} the related ${field.type} entity's primary key
	 * @return the ${entity.simpleName} belonging to the one-to-one relation
	 */
	public final ${entity.simpleName} findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${foreign.pk.type} ${foreign.pk.name}) {
		return findUniqueBy(COLUMN_NAME_${field.name.toUpperCase()}, ${foreign.pk.name});
	}	
#end	
	
#end	

	// ----------------------- many-to-one finders -------------------------
#foreach( $field in $entity.manyToOnes )
#set( $foreign = $entities.get($field.type))
	/**
	 * find-by method for many-to-one field ${field.name}
	 * @param ${field.name} the related ${field.type} entity
	 * @return a List of ${entity.simpleName}s belonging to the many-to-one relation
	 */
	public final List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
		return findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${field.name}.get${helper.firstToUpper($field.entity.pk.name)}());
	}
	
#if( $foreign )  
##	/**
##	 * find-by method for many-to-one field ${field.name}
##	 * @param ${foreign.pk.name} the related ${field.type} entity's primary key
##	 * @return a List of ${entity.simpleName}s belonging to the many-to-one relation
##	 */
##	public final List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}Key(Key ${field.name}Key) {
##		return findBy(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name}Key);
##	}	
##
	/**
	 * find-by method for many-to-one field ${field.name}
	 * @param ${foreign.pk.name} the related ${field.type} entity's primary key
	 * @return a List of ${entity.simpleName}s belonging to the many-to-one relation
	 */
	public final List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${foreign.pk.type} ${foreign.pk.name}) {
            throw new UnsupportedOperationException("Not supported yet.");
//		return findByKey(COLUMN_NAME_${field.name.toUpperCase()}, ${field.type}.class, ${foreign.pk.name});
	}	
#end	
	
#end	

	// ----------------------- many-to-many finders -------------------------
#foreach( $field in $entity.manyToManys )
#if( $entities.get($field.type) )  
#set( $foreign = $entities.get($field.type))
	/**
	 * find-by method for many-to-many field ${field.name}
	 * @param ${field.name} the related ${field.type} entity
	 * @return a List of ${entity.simpleName}s belonging to the many-to-many relation
	 */
	public final List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}(${field.type} ${field.name}) {
#if( $persistenceType == "JPA" )
      return findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${field.name}.get${helper.firstToUpper($foreign.pk.name)}());
#else
		return findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${field.name}.get${helper.firstToUpper($foreign.pk.name)}());
#end
	}
	
	/**
	 * find-by method for many-to-many field ${field.name}
	 * @param ${foreign.pk.type} the related ${field.type} entity's primary key
	 * @return a List of ${entity.simpleName}s belonging to the many-to-many relation
	 */
	public final List<${entity.simpleName}> findBy${helper.firstToUpper($field.name)}${helper.firstToUpper($foreign.pk.name)}(${foreign.pk.type} ${foreign.pk.name}) {
#if( $persistenceType == "JPA" )

      return findByManyToMany("${entity.pk.name}",
                                         "${field.name}_${foreign.pk.name}",
                                         "${field.simpleType}",
                                         "${field.mappedBy}_${entity.pk.name}",
                                         ${foreign.pk.name});
#else
		// FIXME: implement properly
            throw new UnsupportedOperationException("Not supported yet.");
//		return findByManyToMany("${entity.pk.name}", // primaryKeyName
#if( $field.mappedBy )		 
//			"${field.mappedBy}_${entity.pk.name}", // this side's column in the join table (mappedBy="${field.mappedBy}")
#else
#set( $relatedField = $foreign.mappedBy.get($field.name) )
//			"${helper.firstToLower($relatedField.name)}_${entity.pk.name}", // this side's column in the join table  
#end
//			"${field.simpleType}", // related entity class simple name
//			"${field.name}_${foreign.pk.name}", // the related side's column in the join table
//			${foreign.pk.name}); 			 
#end
	}
#end	
	
#end

	// ----------------------- uniqueFields finders -------------------------
#foreach( $uniqueFields in $entity.uniqueFieldsSets )
	/**
	 * find-by method for unique attributes
#foreach( $field in $uniqueFields )	 
	 * @param ${field.name} the specified ${field.name}
#end	 
	 * @return the unique ${entity.simpleName} for the specified fields
	 */
	public final ${entity.simpleName} findBy#foreach( $field in $uniqueFields )
${helper.firstToUpper($field.name)}#end(#foreach( $field in $uniqueFields )
${field.type} ${field.name}#if( $velocityCount < $uniqueFields.size() ), #end
#end) {
		final java.util.Map<String,Object> args = new java.util.HashMap<String,Object>($uniqueFields.size());
#foreach( $field in $uniqueFields )
		args.put(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name});
#end
		return findBy(args);
	}
#end

	// ----------------------- populate / persist method -------------------------

	/**
	 * Persist an entity given all attributes
	 */
	public ${entity.simpleName} persist(#if( $entity.parent )
Object ${entity.parent.name},  	
#end		${entity.pk.type} ${entity.pk.name}#foreach( $field in $entity.fields )
, 
		${field.type} ${field.name}#end
#foreach( $field in $entity.oneToOnes )	 
, 
		${field.type} ${field.name}#end
#foreach( $field in $entity.manyToOnes )	 
, 
		${field.type} ${field.name}#end) {
		${entity.simpleName} domain = null;
		// if primaryKey specified, use it
		if (null != ${entity.pk.name}) {
			domain = findByPrimaryKey(#if( $entity.parent )
${entity.parent.name}, #end${entity.pk.name});
		}
		
#if( 0 < $entity.uniqueFieldsSets.size() )
#set( $uniqueFields = $entity.uniqueFieldsSets.get(0) )
		// use find-by unique column set
		if (null == domain) {
			final java.util.Map<String,Object> args = new java.util.HashMap<String,Object>($uniqueFields.size());
#foreach( $field in $uniqueFields )
			args.put(COLUMN_NAME_${field.name.toUpperCase()}, ${field.name});
#end
			domain = findBy(args);
		}
#end		
		// create new?
		if (null == domain) {
			domain = new ${entity.simpleName}();
#if( $entity.parent )
			// set parent
			domain.set${helper.firstToUpper($entity.parent.name)}((${entity.parent.type}) ${entity.parent.name});
#end			
			// generate Id?
			if (null != ${entity.pk.name}) {
				domain.set${helper.firstToUpper($entity.pk.name)}(${entity.pk.name});
			}
			// fields
#foreach( $field in $entity.fields )
			domain.set${helper.firstToUpper($field.name)}(${field.name});
#end
			// one-to-ones
#foreach( $field in $entity.oneToOnes )	 
			domain.set${helper.firstToUpper($field.name)}(${field.name});
#end
			// many-to-ones
#foreach( $field in $entity.manyToOnes )	 
			domain.set${helper.firstToUpper($field.name)}(${field.name});
#end
			
			persist(domain);
		}
		return domain;
	}


#if( $persistenceType != "JPA" )
#if( $entity.firstUniqueField )
#set( $uniqueField = $entity.firstUniqueField )
	/**
	 * Persists an entity unless it already exists
	 */
	public ${entity.simpleName} persist(#foreach( $field in $entity.fields )
${field.simpleType} ${field.name}#if( 0 < $entity.oneToOnes.size() || 0 < $entity.manyToOnes.size() || $velocityCount < $entity.fields.size() ), #end
#end
#foreach( $field in $entity.oneToOnes )	 
${field.type} ${field.name}#if( 0 < $entity.manyToOnes.size() || $velocityCount < $entity.manyToOnes.size() ), #end
#end
#foreach( $field in $entity.manyToOnes )	 
${field.type} ${field.name}#if( $velocityCount < $entity.manyToOnes.size() ), #end
#end) {
		${entity.simpleName} domain = findBy${helper.firstToUpper($uniqueField.name)}(${uniqueField.name});
		if (null == domain) {
			domain = new ${entity.simpleName}();
#foreach( $field in $entity.fields )
			domain.set${helper.firstToUpper($field.name)}(${field.name});
#end
#foreach( $field in $entity.oneToOnes )	 
			domain.set${helper.firstToUpper($field.name)}(${field.name});
#end
#foreach( $field in $entity.manyToOnes )	 
			domain.set${helper.firstToUpper($field.name)}(${field.name});
#end
			persist(domain);
		}
		return domain;
	}

#end
#end

}
